# This is a basic workflow to help you get started with Actions

name: "Upgrade Tests"

env:
  PERFIT_SERVER: https://perfit.dev.fedimint.org

# Controls when the workflow will run
on:
  schedule:
    # run daily during low usage hours
    - cron:  '30 4 * * *'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      versions:
        description: 'Versions to test (if empty, uses same as daily run)'
        required: false
        default: ''
        

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  tests:
    if: github.repository == 'fedimint/fedimint'
    name: "Upgrade tests"
    runs-on: [self-hosted, linux]
    timeout-minutes: 60

    steps:
      - uses: actions/checkout@v4
      - name: Prepare
        uses: ./.github/actions/prepare
      - uses: cachix/install-nix-action@V27
        with:
          nix_path: nixpkgs=channel:nixos-23.11
          extra_nix_config: |
            connect-timeout = 15
            stalled-download-timeout = 15
      - uses: cachix/cachix-action@v15
        with:
          name: fedimint
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
        continue-on-error: true

      - name: Upgrade tests
        run: |
          # read versions from manually triggered workflows
          # default needed for cron or manual workflow without params
          VERSIONS="${{ github.event.inputs.versions }}"
          VERSIONS=${VERSIONS:="v0.3.3 v0.4.0 current"}

          # the default tmp dir is too long (/home/ubuntu/actions-runner/_work/_temp/)
          # we need to use `nix develop -c` to be able to use `nix build` inside of backwards-compatibility-test
          # Disable `sccache`, it seems incompatible with self-hosted runner sandbox for some reason, and
          # it doesn't benefit us much here anyway.
          env \
            TMPDIR=/tmp \
            CARGO_PROFILE=ci \
            nix develop -c \
            nix shell github:rustshop/fs-dir-cache -c \
            scripts/ci/run-in-fs-dir-cache.sh upgrade-tests \
            env -u RUSTC_WRAPPER \
            runLowPrio ./scripts/tests/upgrade-test.sh "$VERSIONS"

  notifications:
    if: always() && github.repository == 'fedimint/fedimint'
    name: "Notifications"
    timeout-minutes: 1
    runs-on: [self-hosted, linux]
    needs: [ tests ]

    steps:
    - name: Discord notifications on failure
      # https://stackoverflow.com/a/74562058/134409
      if: ${{ always() && contains(needs.*.result, 'failure') }}
      # https://github.com/marketplace/actions/actions-status-discord
      uses: sarisia/actions-status-discord@v1
      with:
        webhook: ${{ secrets.DISCORD_WEBHOOK }}
        # current job is a success, but that's not what we're interested in
        status: failure
