# This is a basic workflow to help you get started with Actions

name: "CI (nix)"

env:
  PERFIT_SERVER: https://perfit.dev.fedimint.org

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch and release tags
  push:
    branches: [ "main", "master", "devel", "releases/v*" ]
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10
  pull_request:
    branches: [ "main", "master", "devel", "releases/v*" ]
  merge_group:
    branches: [ "main", "master", "devel", "releases/v*" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# https://stackoverflow.com/questions/66335225/how-to-cancel-previous-runs-in-the-pr-when-you-push-new-commitsupdate-the-curre
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  self-care:
    name: Flake self-check
    runs-on: [self-hosted, linux, x64]
    steps:
      - uses: actions/checkout@v4
      - name: Check Nix flake inputs
        if: github.event_name == 'pull_request' && github.base_ref == 'master'
        uses: DeterminateSystems/flake-checker-action@v12
        with:
          fail-mode: true
          nixpkgs-keys: nixpkgs

  lint:
    name: "Lint"
    runs-on: [self-hosted, linux, x64]
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4
      - uses: dpc/nix-installer-action@dpc/jj-vqymqvyntouw
      - uses: cachix/cachix-action@v16
        with:
          name: fedimint
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
        continue-on-error: true

      # run the same check that git `pre-commit` hook would, just in case
      - name: Commit check
        run: nix develop --ignore-environment .#lint --command ./misc/git-hooks/pre-commit

      - name: Check udeps
        run: nix build -L .#nightly.test.workspaceCargoUdeps

      - name: Check `nix flake show`
        run: nix flake show .#

      # Since we don't have capacity to build Darwin in PRs, at least make sure it evaluates
      - name: Evaluate MacOS shell
        run: nix eval --system aarch64-darwin .#devShells.aarch64-darwin.default

      - name: Evaluate MacOS build
        run: nix eval --system aarch64-darwin .#workspaceBuild

  shell:
    if: github.repository == 'fedimint/fedimint'
    strategy:
      matrix:
        host:
          - linux
          - macos
        include:
          - host: linux
            runs-on: [self-hosted, linux, x64]
            build-in-pr: false
            timeout: 30
          - host: macos
            runs-on: macos-14
            build-in-pr: false
            timeout: 90

    name: "Dev Shell on ${{ matrix.host }}"
    runs-on: ${{ matrix.runs-on }}
    timeout-minutes: ${{ matrix.timeout }}

    steps:
      - uses: actions/checkout@v4
        if: github.event_name != 'pull_request' || matrix.build-in-pr

      - uses: dpc/nix-installer-action@dpc/jj-vqymqvyntouw
      - uses: cachix/cachix-action@v16
        if: github.event_name != 'pull_request' || matrix.build-in-pr
        with:
          name: fedimint
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
        continue-on-error: true

      - name: Build dev shell
        if: github.event_name != 'pull_request' || matrix.build-in-pr
        run: nix develop -L -c true

  build:
    if: github.repository == 'fedimint/fedimint'
    strategy:
      matrix:
        host:
          - linux
          - macos
        include:
          - host: linux
            runs-on: [self-hosted, linux, x64]
            build-in-pr: true
            timeout: 90
            run-tests: true
          - host: macos
            runs-on: macos-14
            build-in-pr: false
            # TODO: Too slow; see https://github.com/actions/runner-images/issues/1336
            timeout: 75
            run-tests: false

    name: "Build on ${{ matrix.host }}"
    runs-on: ${{ matrix.runs-on }}
    timeout-minutes: ${{ matrix.timeout }}

    steps:
      - uses: actions/checkout@v4
        if: github.event_name != 'pull_request' || matrix.build-in-pr

      - name: Prepare
        if: github.event_name != 'pull_request' || matrix.build-in-pr
        uses: ./.github/actions/prepare

      - uses: dpc/nix-installer-action@dpc/jj-vqymqvyntouw
        if: github.event_name != 'pull_request' || matrix.build-in-pr
      - uses: cachix/cachix-action@v16
        if: github.event_name != 'pull_request' || matrix.build-in-pr
        with:
          name: fedimint
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
        continue-on-error: true

      - name: Build workspace
        if: github.event_name != 'pull_request' || matrix.build-in-pr
        run: |
          env \
            PERFIT_ACCESS_TOKEN="${{ secrets.PERFIT_ACCESS_TOKEN }}" \
            nix run 'github:rustshop/perfit?rev=a2ea3bae86b0e70d2ebdbca1fd16a843b7f0a3bd#perfit' -- \
              run \
                --metric Ym4MS7aDRj6b64woEHq4bw \
                --metadata "commit=${LAST_COMMIT_SHA}" \
                -- \
              nix build -L .#ci.workspaceBuild

      - name: Clippy workspace
        if: github.event_name != 'pull_request' || matrix.build-in-pr
        run: nix build -L .#ci.workspaceClippy

      - name: Run cargo doc
        if: (github.event_name != 'pull_request' || matrix.build-in-pr) && (matrix.host != 'macos')
        run: nix build -L .#ci.workspaceDoc

      - name: Test docs
        if: (github.event_name != 'pull_request' || matrix.build-in-pr) && (matrix.host != 'macos')
        run: nix build -L .#ci.workspaceTestDoc

      - name: Tests
        if: (github.event_name != 'pull_request' || matrix.build-in-pr) && matrix.run-tests
        run: |
          # Note: wasm32-unknown is a toolchain that contains both the native
          # toolchain and wasm32-unknown. Since we want to run both native (in this step)
          # and wasm32 tests (in a different CI step) we can build everything once using
          # wasm32-unknown and share most of the artifacts. The native parts don't
          # mind that the toolchain supports extra targets.
          env \
            PERFIT_ACCESS_TOKEN="${{ secrets.PERFIT_ACCESS_TOKEN }}" \
            nix run 'github:rustshop/perfit?rev=a2ea3bae86b0e70d2ebdbca1fd16a843b7f0a3bd#perfit' -- \
              run \
                --metric HEnBvtqET8iKgJOMMkFoXw \
                --metadata "commit=${LAST_COMMIT_SHA}" \
                -- \
              nix build -L .#wasm32-unknown.ci.ciTestAll

      - name: Tests (5 times more)
        if: github.event_name == 'merge_group' && matrix.run-tests
        run: |
          env \
            PERFIT_ACCESS_TOKEN="${{ secrets.PERFIT_ACCESS_TOKEN }}" \
            nix run 'github:rustshop/perfit?rev=a2ea3bae86b0e70d2ebdbca1fd16a843b7f0a3bd#perfit' -- \
              run \
                --metric _fJdigFYTj6zSGjwx3-WUg \
                --metadata "commit=${LAST_COMMIT_SHA}" \
                -- \
            nix build -L .#wasm32-unknown.ci.ciTestAll5Times

      - name: Wasm Tests
        if: (github.event_name != 'pull_request' || matrix.build-in-pr) && matrix.run-tests && (matrix.host != 'macos')
        run: |
          env \
            PERFIT_ACCESS_TOKEN="${{ secrets.PERFIT_ACCESS_TOKEN }}" \
            nix run 'github:rustshop/perfit?rev=a2ea3bae86b0e70d2ebdbca1fd16a843b7f0a3bd#perfit' -- \
              run \
                --metric 4DtvtPWIQWe--cY6K-wSCg \
                --metadata "commit=${LAST_COMMIT_SHA}" \
                -- \
          nix build -L .#wasm32-unknown.ci.wasmTest

  audit:
    if: github.repository == 'fedimint/fedimint'
    name: "Audit"
    runs-on: [self-hosted, linux, x64]
    timeout-minutes: 10
    # sometimes we can't fix these immediately, yet
    # we don't want to stop the world because of it
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4
      - uses: dpc/nix-installer-action@dpc/jj-vqymqvyntouw
      - uses: cachix/cachix-action@v16
        with:
          name: fedimint
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
        continue-on-error: true

      - name: Run cargo audit
        run: |
          nix flake update advisory-db || nix flake lock --update-input advisory-db
          nix build -L .#ci.cargoAudit

      - name: Run cargo deny
        run: |
          nix build -L .#ci.cargoDeny

  cross:
    name: "Cross-compile on ${{ matrix.host }} to ${{ matrix.toolchain }}"
    needs: [lint, shell]

    strategy:
      matrix:
        host:
          - linux
        toolchain:
          - aarch64-android
          - armv7-android
          - x86_64-android
          - wasm32-unknown
        include:
          - host: linux
            runs-on: [self-hosted, linux, x64]
            build-in-pr: true
            timeout: 20


    runs-on: ${{ matrix.runs-on }}
    timeout-minutes: ${{ matrix.timeout }}

    steps:
      - uses: actions/checkout@v4
        if: github.event_name != 'pull_request' || matrix.build-in-pr

      - uses: dpc/nix-installer-action@dpc/jj-vqymqvyntouw
        if: github.event_name != 'pull_request' || matrix.build-in-pr

      - uses: cachix/cachix-action@v16
        if: github.event_name != 'pull_request' || matrix.build-in-pr
        with:
          name: fedimint
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
        continue-on-error: true

      - name: Build client packages for ${{ matrix.toolchain }}
        if: github.event_name != 'pull_request' || matrix.build-in-pr
        run: |
          nix build -L .#${{ matrix.toolchain }}.ci.client-pkgs

      - name: Build fedimint-client-wasm package for ${{ matrix.toolchain }}
        if: (github.event_name != 'pull_request' || matrix.build-in-pr) && (matrix.toolchain == 'wasm32-unknown')
        run: |
          nix build -L .#${{ matrix.toolchain }}.ci.fedimint-client-wasm

  containers:
    if: github.repository == 'fedimint/fedimint'
    name: "Containers"
    strategy:
      matrix:
        platform:
          - arch: x86_64-linux
            runs-on: [self-hosted, linux, x64]
            run_in_pr: true
          - arch: aarch64-linux
            runs-on: [self-hosted, linux, arm64]
            run_in_pr: false
        container:
          - name: fedimintd
            image: fedimint/fedimintd
          - name: fedimint-cli
            image: fedimint/fedimint-cli
          - name: gatewayd
            image: fedimint/gatewayd
          - name: gateway-cli
            image: fedimint/gateway-cli
          - name: fedimint-recurringd
            image: fedimint/fedimint-recurringd
          - name: devtools
            image: fedimint/devtools
    runs-on: ${{ matrix.platform.runs-on }}
    # TODO: reduce back to 60
    # https://github.com/fedimint/fedimint/issues/7561
    timeout-minutes: 120
    steps:
      - name: Checkout Code
        if: github.event_name != 'pull_request' || matrix.platform.run_in_pr
        uses: actions/checkout@v4
      - name: Prepare
        if: github.event_name != 'pull_request' || matrix.platform.run_in_pr
        uses: ./.github/actions/prepare
      - uses: actions/checkout@v4
        if: github.event_name != 'pull_request' || matrix.platform.run_in_pr
      - uses: dpc/nix-installer-action@dpc/jj-vqymqvyntouw
        if: github.event_name != 'pull_request' || matrix.platform.run_in_pr
      - uses: cachix/cachix-action@v16
        if: github.event_name != 'pull_request' || matrix.platform.run_in_pr
        with:
          name: fedimint
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
        continue-on-error: true

      - name: Build ${{ matrix.container.name }} container for ${{ matrix.platform.arch }}
        if: github.event_name != 'pull_request' || matrix.platform.run_in_pr
        run: |
          if [ "$GITHUB_EVENT_NAME" == "pull_request" ] || [ "$GITHUB_EVENT_NAME" == "merge_group" ]; then
            nix build -L .#ci.container.${{ matrix.container.name }} --system ${{ matrix.platform.arch }}
          else
            nix build -L .#container.${{ matrix.container.name }} --system ${{ matrix.platform.arch }}
          fi
          echo "container_tag=$(docker load < result | awk '{ print $3 }')" >> $GITHUB_ENV

      - name: Login to Docker Hub
        if: (github.ref == 'refs/heads/master' || github.ref_type == 'tag' || startsWith(github.ref, 'refs/heads/releases/')) && (github.event_name != 'pull_request' || matrix.platform.run_in_pr)
        uses: docker/login-action@v3
        with:
          username: fedimint
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Publish
        if: (github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/heads/releases/')) && (github.event_name != 'pull_request' || matrix.platform.run_in_pr)
        run: |
          nix_tag=${{ env.container_tag }} && hub_tag="${{ matrix.container.image }}:${LAST_COMMIT_SHA}-${{ matrix.platform.arch }}" && docker tag "$nix_tag" "$hub_tag" && docker push "$hub_tag"

      - name: Publish master tag
        if: github.ref == 'refs/heads/master' && (github.event_name != 'pull_request' || matrix.platform.run_in_pr)
        run: |
          nix_tag=${{ env.container_tag }} && hub_tag="${{ matrix.container.image }}:master-${{ matrix.platform.arch }}" && docker tag "$nix_tag" "$hub_tag" && docker push "$hub_tag"

      - name: Publish release branch tag
        if: startsWith(github.ref, 'refs/heads/releases/') && (github.event_name != 'pull_request' || matrix.platform.run_in_pr)
        run: |
          # Extract the version from branch name (e.g., releases/v0.8 -> releases-v0.8)
          BRANCH_NAME="${GITHUB_REF#refs/heads/}"
          VERSION_TAG="${BRANCH_NAME//\//-}"  # Replace / with - to get releases-v0.8
          nix_tag=${{ env.container_tag }} && hub_tag="${{ matrix.container.image }}:${VERSION_TAG}-${{ matrix.platform.arch }}" && docker tag "$nix_tag" "$hub_tag" && docker push "$hub_tag"

      - name: Publish tagged release
        if: github.ref_type == 'tag' && (github.event_name != 'pull_request' || matrix.platform.run_in_pr)
        run: |
          nix_tag=${{ env.container_tag }} && hub_tag="${{ matrix.container.image }}:${GITHUB_REF_NAME}-${{ matrix.platform.arch }}" && docker tag "$nix_tag" "$hub_tag" && docker push "$hub_tag"

  manifest:
    if: github.repository == 'fedimint/fedimint' && (github.ref == 'refs/heads/master' || github.ref_type == 'tag' || startsWith(github.ref, 'refs/heads/releases/'))
    name: "Create Multi-arch Manifests"
    needs: containers
    runs-on: [self-hosted, linux, x64]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Prepare
        uses: ./.github/actions/prepare
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: fedimint
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Create and push multi-arch manifests
        run: |
          # hardcode container names since they're not available as outputs from the container job
          containers="fedimintd fedimint-cli gatewayd gateway-cli fedimint-recurringd devtools"

          # Reference the following blog post for multi arch images with nix and docker manifest
          # https://tech.aufomm.com/how-to-build-multi-arch-docker-image-on-nixos
          for container in $containers; do
            image="fedimint/$container"
            if [ "$GITHUB_REF" = "refs/heads/master" ]; then
              echo "Creating manifest for $image:master"
              docker manifest create "$image:master" \
                "$image:master-x86_64-linux" \
                "$image:master-aarch64-linux"
              docker manifest annotate "$image:master" "$image:master-x86_64-linux" --arch amd64
              docker manifest annotate "$image:master" "$image:master-aarch64-linux" --arch arm64
              docker manifest push "$image:master"

              echo "Creating manifest for $image:${LAST_COMMIT_SHA}"
              docker manifest create "$image:${LAST_COMMIT_SHA}" \
                "$image:${LAST_COMMIT_SHA}-x86_64-linux" \
                "$image:${LAST_COMMIT_SHA}-aarch64-linux"
              docker manifest annotate "$image:${LAST_COMMIT_SHA}" "$image:${LAST_COMMIT_SHA}-x86_64-linux" --arch amd64
              docker manifest annotate "$image:${LAST_COMMIT_SHA}" "$image:${LAST_COMMIT_SHA}-aarch64-linux" --arch arm64
              docker manifest push "$image:${LAST_COMMIT_SHA}"
            elif [ "$GITHUB_REF_TYPE" = "tag" ]; then
              echo "Creating manifest for $image:${GITHUB_REF_NAME}"
              docker manifest create "$image:${GITHUB_REF_NAME}" \
                "$image:${GITHUB_REF_NAME}-x86_64-linux" \
                "$image:${GITHUB_REF_NAME}-aarch64-linux"
              docker manifest annotate "$image:${GITHUB_REF_NAME}" "$image:${GITHUB_REF_NAME}-x86_64-linux" --arch amd64
              docker manifest annotate "$image:${GITHUB_REF_NAME}" "$image:${GITHUB_REF_NAME}-aarch64-linux" --arch arm64
              docker manifest push "$image:${GITHUB_REF_NAME}"
            elif [[ "$GITHUB_REF" =~ ^refs/heads/releases/ ]]; then
              # Extract the version from branch name (e.g., releases/v0.8 -> releases-v0.8)
              BRANCH_NAME="${GITHUB_REF#refs/heads/}"
              VERSION_TAG="${BRANCH_NAME//\//-}"  # Replace / with - to get releases-v0.8

              echo "Creating manifest for $image:${VERSION_TAG}"
              docker manifest create "$image:${VERSION_TAG}" \
                "$image:${VERSION_TAG}-x86_64-linux" \
                "$image:${VERSION_TAG}-aarch64-linux"
              docker manifest annotate "$image:${VERSION_TAG}" "$image:${VERSION_TAG}-x86_64-linux" --arch amd64
              docker manifest annotate "$image:${VERSION_TAG}" "$image:${VERSION_TAG}-aarch64-linux" --arch arm64
              docker manifest push "$image:${VERSION_TAG}"

              echo "Creating manifest for $image:${LAST_COMMIT_SHA}"
              docker manifest create "$image:${LAST_COMMIT_SHA}" \
                "$image:${LAST_COMMIT_SHA}-x86_64-linux" \
                "$image:${LAST_COMMIT_SHA}-aarch64-linux"
              docker manifest annotate "$image:${LAST_COMMIT_SHA}" "$image:${LAST_COMMIT_SHA}-x86_64-linux" --arch amd64
              docker manifest annotate "$image:${LAST_COMMIT_SHA}" "$image:${LAST_COMMIT_SHA}-aarch64-linux" --arch arm64
              docker manifest push "$image:${LAST_COMMIT_SHA}"
            fi
          done

  pkgs:
    if: github.repository == 'fedimint/fedimint' && (github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/heads/releases') || github.ref_type == 'tag')
    name: "Release packages: ${{ matrix.build.flake-output }} on ${{ matrix.platform.name }}"

    strategy:
      matrix:
        platform:
          - name: linux
            runs-on: [self-hosted, linux, x64]
            timeout: 60
            build-deb: true
            build-rpm: true
            build-bundled: true
            shasum-cmd: sha256sum
          - name: macos-aarch64
            runs-on: macos-14
            timeout: 180
            build-deb: false
            build-rpm: false
            build-bundled: false
            shasum-cmd: shasum -a 256
        build:
          - flake-output: fedimint-pkgs
            bins: fedimintd,fedimint-cli,fedimint-dbtool,fedimint-recoverytool
            deb: fedimint
          - flake-output: gateway-pkgs
            bins: gateway-cli,gatewayd
            deb: fedimint-gateway
          - flake-output: devimint
            bins: devimint
            deb: devimint

    runs-on: ${{ matrix.platform.runs-on }}
    timeout-minutes: ${{ matrix.platform.timeout }}

    env:
      IS_PRERELEASE: ${{
          startsWith(github.ref, 'refs/tags/')
          && (contains(github.ref, 'beta') || contains(github.ref, 'rc'))
        }}
      PRERELEASE_MESSAGE: |
        ⚠️ **Pre-release Notice**

        - This is a release candidate version
        - Features may be unstable
        - You may not be able to upgrade to the final release
        - Not recommended for mainnet use

        Please report any issues you encounter.

    steps:
      - uses: actions/checkout@v4
      - uses: dpc/nix-installer-action@dpc/jj-vqymqvyntouw
      - uses: cachix/cachix-action@v16
        with:
          name: fedimint
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
        continue-on-error: true

      - name: Set BUILD_ID to tag or commit hash
        run: |
          if [[ $GITHUB_REF_TYPE == "tag" ]]; then
            echo "BUILD_ID=${GITHUB_REF_NAME}" >> $GITHUB_ENV
          else
            echo "BUILD_ID=${GITHUB_SHA}" >> $GITHUB_ENV
          fi

      - name: Build ${{ matrix.build.flake-output }}
        env:
          # seems like cachix needs this explicitly set in the env
          CACHIX_AUTH_TOKEN: '${{ secrets.CACHIX_AUTH_TOKEN }}'
        run: |
          >&2 echo "Building: ${{ matrix.build.flake-output }}"
          nix build -L .#${{ matrix.build.flake-output }}
          mkdir -p bins
          bins="${{ matrix.build.bins }}"
          for bin in ${bins//,/ } ; do
            if [[ $GITHUB_REF_TYPE == "tag" ]]; then
              >&2 echo "Building: $bin"
              nix build -L .#$bin

              closure_size=$(nix path-info -rS --json .#$bin | nix run nixpkgs#jq '. | to_entries[] | select(.value.ultimate == true) | .value.narSize')
              >&2 echo "$bin's Nix closure size: $closure_size"

              if [ 280000000 -lt $closure_size ]; then
                >&2 echo "$bin's Nix closure size seems too big: $closure_size"
                exit 1
              fi

              >&2 echo "Pushing to cachix: $bin"
              cachix push fedimint -c 8 -j 8 $(nix-store --query --references $(readlink -f result)) $(readlink -f result)
              >&2 echo "Pining in cachix: fedimint-release-$bin:$BUILD_ID"
              if [[ "$BUILD_ID" == *"-rc."* ]] || [[ "$BUILD_ID" == *"-alpha."* ]] || [[ "$BUILD_ID" == *"-testing."* ]]|| [[ "$BUILD_ID" == *"-beta."* ]] ; then
                >&2 echo "Will not pin in cachix, as looks like a pre-release"
              else
                cachix pin fedimint "fedimint-release-$bin:$BUILD_ID" $(readlink -f result)
              fi
            fi
            if [ "${{ matrix.platform.build-bundled }}" = "true" ]; then
              # Note: keep in sync with sign.sh
              >&2 echo "Building bundled: $bin"
              nix bundle --bundler .# ".#$bin" -o "bins/$bin-$BUILD_ID" && ${{ matrix.platform.shasum-cmd }} "bins/$bin-$BUILD_ID"
            fi
          done

      - name: Check version ${{ matrix.build.bins }}
        run: |
          bins="${{ matrix.build.bins }}"
          for bin in ${bins//,/ } ; do
            >&2 echo "Checking version: $bin"
            nix run .#$bin version-hash && echo "$GITHUB_SHA" && test "$(nix run .#$bin version-hash)" = "${GITHUB_SHA}"
          done

      - name: Check sha256sum ${{ matrix.build.bins }}
        run: |
          bins="${{ matrix.build.bins }}"
          for bin in ${bins//,/ } ; do
            >&2 echo "Checking sha256sum: $bin"
            nix build -L .#$bin && ${{ matrix.platform.shasum-cmd }} "./result/bin/$bin"
          done

      - name: Upload Binaries
        uses: actions/upload-artifact@v5
        with:
          name: "${{ matrix.build.flake-output}}-${{ matrix.platform.name }}"
          path: "bins/**"

      - name: Release Binaries
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: "bins/**"
          prerelease: ${{ env.IS_PRERELEASE }}
          body: ${{ fromJSON(env.IS_PRERELEASE) && env.PRERELEASE_MESSAGE || '' }}

      - name: Build DEB package
        if: matrix.platform.build-deb
        run: |
          bins="${{ matrix.build.bins }}"
          for bin in ${bins//,/ } ; do
            >&2 echo "Bundling DEB: $bin"
            nix bundle -L --bundler .#toDEB --accept-flake-config -o debs/$bin .#$bin
            # workaround: https://github.com/actions/upload-artifact/issues/92
            cp -a debs/$bin/*.deb debs/
          done

      - name: Build RPM package
        if: matrix.platform.build-rpm
        run: |
          bins="${{ matrix.build.bins }}"
          for bin in ${bins//,/ } ; do
            >&2 echo "Bundling RPM: $bin"
            nix bundle -L --bundler .#toRPM --accept-flake-config -o rpms/$bin .#$bin
            # workaround: https://github.com/actions/upload-artifact/issues/92
            cp -a rpms/$bin/*.rpm rpms/
          done

      - name: Upload DEB packages
        if: matrix.platform.build-deb
        uses: actions/upload-artifact@v5
        with:
          name: "${{ matrix.build.flake-output }}-${{ matrix.platform.name }}-deb-bundle"
          path: "debs/**.deb"

      - name: Release DEB packages
        if: startsWith(github.ref, 'refs/tags/') && matrix.platform.build-deb
        uses: softprops/action-gh-release@v2
        with:
          files: "debs/**.deb"
          prerelease: ${{ env.IS_PRERELEASE }}
          body: ${{ fromJSON(env.IS_PRERELEASE) && env.PRERELEASE_MESSAGE || '' }}

      - name: Upload RPM packages
        if: matrix.platform.build-rpm
        uses: actions/upload-artifact@v5
        with:
          name: "${{ matrix.build.flake-output }}-${{ matrix.platform.name }}-rpm-bundle"
          path: "rpms/**.rpm"

      - name: Release RPM packages
        if: startsWith(github.ref, 'refs/tags/') && matrix.platform.build-rpm
        uses: softprops/action-gh-release@v2
        with:
          files: "rpms/**.rpm"
          prerelease: ${{ env.IS_PRERELEASE }}
          body: ${{ fromJSON(env.IS_PRERELEASE) && env.PRERELEASE_MESSAGE || '' }}

  check-nixos-up-to-date:
    name: "Check NixOS/nixpkgs on ${{ matrix.arch }}"
    strategy:
      matrix:
        arch: [x64, arm64]
        include:
          - arch: x64
            runs-on: [self-hosted, linux, x64]
          - arch: arm64
            runs-on: [self-hosted, linux, arm64]
    runs-on: ${{ matrix.runs-on }}
    if: github.event_name == 'pull_request'
    timeout-minutes: 5
    steps:
      - name: Check NixOS system age
        run: |
          if [ ! -f /etc/nixpkgs-last-modified ]; then
            echo "ERROR: /etc/nixpkgs-last-modified file not found"
            exit 1
          fi

          MAX_AGE_DAYS=45

          last_modified=$(cat /etc/nixpkgs-last-modified)
          current_time=$(date +%s)
          age_seconds=$((current_time - last_modified))
          age_days=$((age_seconds / 86400))

          echo "System last modified: $(date -d @$last_modified '+%Y-%m-%d %H:%M:%S UTC')"
          echo "Current time: $(date -d @$current_time '+%Y-%m-%d %H:%M:%S UTC')"
          echo "System age: $age_days days"

          if [ $age_days -gt $MAX_AGE_DAYS ]; then
            echo "ERROR: NixOS system is $age_days days old (older than $MAX_AGE_DAYS days)"
            exit 1
          else
            echo "SUCCESS: NixOS system is $age_days days old (within $MAX_AGE_DAYS day limit)"
          fi

  status:
    name: Status
    needs: [lint, shell, build, cross, containers, pkgs]
    if: ${{ always() }}
    runs-on: [self-hosted, linux, x64]
    steps:
      - name: Check status of all jobs
        if: >-
          ${{
            contains(needs.*.result, 'failure') ||
            contains(needs.*.result, 'cancelled')
          }}
        run: exit 1

  notifications:
    if: always() && github.repository == 'fedimint/fedimint' && github.event_name != 'merge_group'
    name: "Notifications"
    timeout-minutes: 1
    runs-on: [self-hosted, linux, x64]
    # note: we don't depend on `audit` because it will
    # be often broken, and we can't fix it immediately
    needs: [ lint, build, shell, cross, containers, pkgs]

    steps:
    - name: Discord notifications on failure
      # https://stackoverflow.com/a/74562058/134409
      if: ${{ always() && contains(needs.*.result, 'failure') }}
      # https://github.com/marketplace/actions/actions-status-discord
      uses: sarisia/actions-status-discord@v1
      with:
        webhook: ${{ secrets.DISCORD_WEBHOOK }}
        # current job is a success, but that's not what we're interested in
        status: failure
