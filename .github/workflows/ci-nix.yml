# This is a basic workflow to help you get started with Actions

name: "CI (nix)"

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main", "master", "devel" ]
  pull_request:
    branches: [ "main", "master", "devel" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  lint:
    name: "Lint"
    runs-on: ubuntu-22.04
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v3
      - uses: cachix/install-nix-action@v17
        with:
          nix_path: nixpkgs=channel:nixos-22.05
      - uses: cachix/cachix-action@v10
        with:
          name: fedimint
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'

      # run the same check that git `pre-commit` hook would, just in case
      - name: Commit check
        run: nix develop --ignore-environment .#lint --command ./misc/git-hooks/pre-commit

  build:
    name: "Build"
    runs-on: buildjet-8vcpu-ubuntu-2004
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v3
      - uses: cachix/install-nix-action@v17
        with:
          nix_path: nixpkgs=channel:nixos-22.05
      - uses: cachix/cachix-action@v10
        with:
          name: fedimint
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'

      - name: Build workspace
        run: nix build -L .#workspaceBuild

      - name: Clippy workspace
        run: nix build -L .#workspaceClippy

      - name: Run cargo doc
        run: nix build -L .#workspaceDoc

      - name: Run cargo audit
        run: nix build -L .#workspaceAudit

      # `ccov` job will run `cargo test`, so no need to spend time on it here
      # - name: Test workspace
      #   run: nix build -L .#workspaceTest

      - name: Reconnect Tests
        # run: nix-shell --command ./scripts/reconnect-test.sh
        run: nix build -L .#cli-test.reconnect

      - name: Latency Tests
        # run: nix-shell --command ./scripts/latency-test.sh
        run: nix build -L .#cli-test.latency

      - name: CLI Tests
        # run: nix-shell --command ./scripts/cli-test.sh
        run: nix build -L .#cli-test.cli

      - name: Clientd and clientd-cli tests
        # run: nix-shell --command ./scripts/clientd-tests.sh
        run: nix build -L .#cli-test.clientd

      - name: Integration Tests (no fixtures)
        # run: nix-shell --command ./scripts/rust-tests.sh
        run: nix build -L .#cli-test.rust-tests


  # Code Coverage will build using a completely different profile (neither debug/release)
  # Which means we can not reuse much from `build` job. Might as well run it as another
  # build in parallel
  ccov:
    name: "Code coverage"
    runs-on: buildjet-8vcpu-ubuntu-2004
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v3
      - uses: cachix/install-nix-action@v17
        with:
          nix_path: nixpkgs=channel:nixos-22.05
      - uses: cachix/cachix-action@v10
        with:
          name: fedimint
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'

      - name: Build and run tests with Code Coverage
        run: nix build -L .#workspaceCov

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: result/lcov.info
          fail_ci_if_error: true

  wasm32:
    name: "Cross-compile: wasm32"
    runs-on: ubuntu-22.04
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v3
      - uses: cachix/install-nix-action@v15
        with:
          nix_path: nixpkgs=channel:nixos-22.05
      - uses: cachix/cachix-action@v10
        with:
          name: fedimint
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'

      - name: Build mint-client for wasm32
        run: nix build -L .#wasm32.mint-client

  containers:
    name: "Containers"
    runs-on: ubuntu-22.04
    timeout-minutes: 40
    steps:
      - uses: actions/checkout@v3
      - uses: cachix/install-nix-action@v17
        with:
          nix_path: nixpkgs=channel:nixos-22.05
      - uses: cachix/cachix-action@v10
        with:
          name: fedimint
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'

      - name: Build fedimintd container
        run: |
          nix build -L .#container.fedimintd
          echo "fedimintd_container_tag=$(docker load < result | awk '{ print $3 }')" >> $GITHUB_ENV

      - name: Login to Docker Hub
        if: github.ref == 'refs/heads/master'
        uses: docker/login-action@v2
        with:
          username: fedimint
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Publish
        if: github.ref == 'refs/heads/master'
        run: nix_tag=${{ env.fedimintd_container_tag }} && hub_tag="fedimint/fedimintd:${GITHUB_SHA}" && docker tag "$nix_tag" "$hub_tag" && docker push "$hub_tag"
