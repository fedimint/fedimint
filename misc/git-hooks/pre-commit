#
# NOTE: THIS FILE IS AUTO-GENERATED BY FLAKEBOX
#
#!/usr/bin/env bash

set -euo pipefail

set +e
git diff-files --quiet
is_unclean=$?
set -e

# Revert `git stash` on exit
function revert_git_stash {
  >&2 echo "Unstashing uncommitted changes..."
  git stash pop -q
}

# Stash pending changes and revert them when script ends
if [ -z "${NO_STASH:-}" ] && [ $is_unclean -ne 0 ]; then
  >&2 echo "Stashing uncommitted changes..."
  GIT_LITERAL_PATHSPECS=0 git stash -q --keep-index
  trap revert_git_stash EXIT
fi

export FLAKEBOX_GIT_LS
if [ -z "${FLAKEBOX_GIT_LS_IGNORE:-}" ]; then
  FLAKEBOX_GIT_LS="$(git ls-files | while read -r file; do [ ! -L "$file" ] && echo "$file"; done)"
else
  FLAKEBOX_GIT_LS="$(git ls-files | grep -v -E "${FLAKEBOX_GIT_LS_IGNORE}" | while read -r file; do [ ! -L "$file" ] && echo "$file"; done)"
fi

export FLAKEBOX_GIT_LS_TEXT
if [ -z "${FLAKEBOX_GIT_LS_TEXT_IGNORE:-}" ]; then
  FLAKEBOX_GIT_LS_TEXT="$(echo "$FLAKEBOX_GIT_LS" | grep -v -E "\.(png|ods|jpg|jpeg|woff2|keystore|wasm|ttf|jar|ico|gif)\$")"
else
  FLAKEBOX_GIT_LS_TEXT="$(echo "$FLAKEBOX_GIT_LS" | grep -v -E "\.(png|ods|jpg|jpeg|woff2|keystore|wasm|ttf|jar|ico|gif)\$" | grep -v -E "${FLAKEBOX_GIT_LS_TEXT_IGNORE}")"
fi


function check_nothing() {
  true
}
export -f check_nothing

# NOTE: THIS FILE IS AUTO-GENERATED BY FLAKEBOX
function check_cargo_sort() {
    set -euo pipefail

    #!/usr/bin/env bash

    set -eo pipefail

    cargo sort -w -g --order package,features,bin,lib,test,bench,dependencies,dev-dependencies,build-dependencies --check >/dev/null
}
export -f check_cargo_sort

# NOTE: THIS FILE IS AUTO-GENERATED BY FLAKEBOX
function check_cargo_fmt() {
    set -euo pipefail

    flakebox-in-each-cargo-workspace cargo fmt --all --check
}
export -f check_cargo_fmt

# NOTE: THIS FILE IS AUTO-GENERATED BY FLAKEBOX
function check_cargo_lock() {
    set -euo pipefail

    # https://users.rust-lang.org/t/check-if-the-cargo-lock-is-up-to-date-without-building-anything/91048/5
    flakebox-in-each-cargo-workspace cargo update --workspace --locked -q
}
export -f check_cargo_lock

# NOTE: THIS FILE IS AUTO-GENERATED BY FLAKEBOX
function check_check_forbidden_dependencies() {
    set -euo pipefail

    #!/usr/bin/env bash

    set -eo pipefail

    if grep -E "fedimint-[a-zA-Z0-9]+-(server|client|common)" fedimint-server/Cargo.toml | grep -v -E "fedimint-api-client|fedimint-dummy-common|fedimint-dummy-server" >&2 ; then
      >&2 echo "fedimint-server/Cargo.toml must not depend on modules"
      return 1
    fi
<<<<<<< HEAD
    if grep -E "fedimint-[a-zA-Z0-9]+-(server|client)" fedimint-testing/Cargo.toml | grep -v -E "fedimint-api-client|fedimint-gateway-*" >&2 ; then
=======
    if grep -E "(fedimint-mint|fedimint-wallet-|fedimint-ln-(server|client))" fedimint-testing/Cargo.toml >&2 ; then
>>>>>>> f922c6e78 (feat: initial implementation of walletv2)
      >&2 echo "fedimint-testing/Cargo.toml must not depend on modules"
      return 1
    fi
    find modules/ -name Cargo.toml | grep common/ | while read -r cargo_toml ; do
      if grep -E "fedimint-" "$cargo_toml" | grep -E -v "fedimint-core|fedimint-api-client|-common|fedimint-logging" >&2 ; then
        >&2 echo "Fedimint modules' -common crates should not introduce new fedimint dependencies: $cargo_toml"
        >&2 echo "The goal is to avoid circular deps that blow up build times. Ping @dpc for help."
        return 1
      fi
    done
    find gateway/fedimint-gateway-client/ -name Cargo.toml | while read -r cargo_toml ; do
      if grep -E "fedimint-lightning" "$cargo_toml" >&2 ; then
        >&2 echo "$cargo_toml must not depend on fedimint-lightning"
        return 1
      fi
    done
    find gateway/ -name Cargo.toml | while read -r cargo_toml ; do
      if grep -E "fedimint-server" "$cargo_toml" >&2 ; then
        >&2 echo "$cargo_toml must not depend on fedimint-server"
        return 1
      fi
    done
    find fedimint-client/ -name Cargo.toml | while read -r cargo_toml ; do
      if grep -E "fedimint-server" "$cargo_toml" >&2 ; then
        >&2 echo "$cargo_toml must not depend on fedimint-server"
        return 1
      fi
    done
    echo Cargo.lock | while read -r cargo_lock ; do
      if grep -E "openssl" "$cargo_lock" | grep -v openssl-probe >&2 ; then
        >&2 echo "$cargo_lock must not depend on openssl"
        return 1
      fi
    done
}
export -f check_check_forbidden_dependencies

# NOTE: THIS FILE IS AUTO-GENERATED BY FLAKEBOX
function check_leftover_dbg() {
    set -euo pipefail

    errors=""
    for path in $(echo "$FLAKEBOX_GIT_LS_TEXT" | grep '.*\.rs'); do
      if grep 'dbg!(' "$path" > /dev/null; then
        >&2 echo "$path contains dbg! macro"
        errors="true"
      fi
    done

    if [ -n "$errors" ]; then
      >&2 echo "Fix the problems above or use --no-verify" 1>&2
      return 1
    fi
}
export -f check_leftover_dbg

# NOTE: THIS FILE IS AUTO-GENERATED BY FLAKEBOX
function check_nixfmt() {
    set -euo pipefail

    # we actually rely on word splitting here
    # shellcheck disable=SC2046
    nixfmt -c $(echo "$FLAKEBOX_GIT_LS_TEXT" | grep "\.nix$")
}
export -f check_nixfmt

# NOTE: THIS FILE IS AUTO-GENERATED BY FLAKEBOX
function check_semgrep() {
    set -euo pipefail

    # semgrep is not available on MacOS
    if ! command -v semgrep > /dev/null ; then
      >&2 echo "Skipping semgrep check: not available"
      return 0
    fi

    if [ ! -f .config/semgrep.yaml ] ; then
      >&2 echo "Skipping semgrep check: .config/semgrep.yaml doesn't exist"
      return 0
    fi

    if [ ! -s .config/semgrep.yaml ] ; then
      >&2 echo "Skipping semgrep check: .config/semgrep.yaml empty"
      return 0
    fi

    env SEMGREP_ENABLE_VERSION_CHECK=0 \
      semgrep -q --error --no-rewrite-rule-ids --config .config/semgrep.yaml
}
export -f check_semgrep

# NOTE: THIS FILE IS AUTO-GENERATED BY FLAKEBOX
function check_shellcheck() {
    set -euo pipefail

    for path in $(echo "$FLAKEBOX_GIT_LS_TEXT" | grep -E '.*\.sh$'); do
      shellcheck --severity=warning "$path"
    done
}
export -f check_shellcheck

# NOTE: THIS FILE IS AUTO-GENERATED BY FLAKEBOX
function check_trailing_whitespace() {
    set -euo pipefail

    rev="HEAD"
    if ! git rev-parse -q 1>/dev/null HEAD 2>/dev/null ; then
      >&2 echo "Warning: no commits yet, checking against --root"
      rev="--root"
    fi
    if ! git diff --check $rev ; then
      >&2 echo "Trailing whitespace detected. Please remove them before committing."
      return 1
    fi
}
export -f check_trailing_whitespace

# NOTE: THIS FILE IS AUTO-GENERATED BY FLAKEBOX
function check_typos() {
    set -euo pipefail

    if ! echo "$FLAKEBOX_GIT_LS_TEXT" | typos --file-list - --force-exclude ; then
      >&2 echo "Typos found: Valid new words can be added to '.typos.toml'"
      return 1
    fi
}
export -f check_typos

parallel \
  --nonotice \
::: \
    check_cargo_sort \
    check_cargo_fmt \
    check_cargo_lock \
    check_check_forbidden_dependencies \
    check_leftover_dbg \
    check_nixfmt \
    check_semgrep \
    check_shellcheck \
    check_trailing_whitespace \
    check_typos \
  check_nothing
#
# NOTE: THIS FILE IS AUTO-GENERATED BY FLAKEBOX
#
