#!/usr/bin/env bash

set -eo pipefail

# https://stackoverflow.com/a/72183258/134409
# this hangs in CI (no tty?)
# yes 'will cite' | parallel --citation 2>/dev/null 1>/dev/null || true
if [ -n "${HOME:-}" ] && [ -d "$HOME" ]; then
  mkdir -p "$HOME/.parallel"
  touch "$HOME/.parallel/will-cite"
fi

# Revert `git stash` on exit
function revert_git_stash {
  >&2 echo "Unstashing uncommited changes..."
  git stash pop -q
}

set +e
git diff-files --quiet
is_unclean=$?
set -e


# Stash pending changes and revert them when script ends
if [ -z "${NO_STASH:-}" ] && [ $is_unclean -ne 0 ]; then
  >&2 echo "Stashing uncommited changes..."
  git stash -q --keep-index
  trap revert_git_stash EXIT
fi


export git_ls_files
git_ls_files="$(git ls-files)"


function check_nix() {
  # shellcheck disable=SC2046
  nixpkgs-fmt --check $(echo "$git_ls_files" | grep -E '.*\.nix$') 2> >(grep -v "0 / 7 would have been reformatted")
}
export -f check_nix


function check_cargo_fmt() {
  # Note: avoid `cargo fmt --all` so we don't need extra stuff in `ci` shell
  # so that CI is faster
  # shellcheck disable=SC2046
  cargo fmt --all --check
}
export -f check_cargo_fmt


function check_dbg() {
  errors=""
  for path in $(echo "$git_ls_files" | grep  '.*\.rs'); do
    if grep 'dbg!(' "$path"  > /dev/null; then
      >&2 echo "$path contains dbg! macro"
      errors="true"
    fi
  done

  if [ -n "$errors" ]; then
    >&2 echo "Fix the problems above or use --no-verify" 1>&2
    return 1
  fi
}
export -f check_dbg

function check_semgrep() {

  if ! command -v semgrep ; then
    >&2 echo "Skipping semgrep check"
    return 0
  fi

  semgrep -q --error --config .semgrep.yaml fedimint-server/
}
export -f check_semgrep


function check_shellcheck() {
  for path in $(echo "$git_ls_files" | grep -E '.*\.sh$')  ; do
    shellcheck --severity=warning "$path"
  done
}
export -f check_shellcheck


function check_eof() {
  errors=""
  for path in $(echo "$git_ls_files" | grep -v -E '.*\.(ods|jpg)'); do
    # extra branches for clarity
    if [ ! -s "$path" ]; then
       # echo "$path is empty"
       true
    elif [ -z "$(tail -c 1 < "$path")" ]; then
       # echo "$path ends with a newline or with a null byte"
       true
    else
      >&2 echo "$path doesn't end with a newline" 1>&2
      errors="true"
    fi
  done

  if [ -n "$errors" ]; then
    >&2 echo "Fix the problems above or use --no-verify" 1>&2
    return 1
  fi
}
export -f check_eof


parallel ::: check_nix check_cargo_fmt check_dbg check_semgrep check_shellcheck check_eof 
