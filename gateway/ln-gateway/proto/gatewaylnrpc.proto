syntax = "proto3";

package gatewaylnrpc;

/* GatewayLightning is a service that provides limited access and functionality
 * from a lightning node to Fedimint gateways */
service GatewayLightning {
  /* GetPubKey returns the public key of the associated lightning node */
  rpc GetPubKey(GetPubKeyRequest) returns (GetPubKeyResponse) {}

  /* PayInvoice attempts to pay an invoice using the associated lightning node
   */
  rpc PayInvoice(PayInvoiceRequest) returns (PayInvoiceResponse) {}

  /* InterceptHtlcs opens a stream for a client to receive specific HTLCs
   * that have a specific short channel id. For every HTLC intercepted and
   * processed, the client should stream back a Success or Failure response.
   */
  rpc InterceptHtlcs(stream InterceptHtlcsRequest)
      returns (stream InterceptedHtlcResponse) {}
}

message GetPubKeyRequest {}

message GetPubKeyResponse {
  // The public key of the associated lightning node
  bytes pub_key = 1;
}

message PayInvoiceRequest {
  string invoice = 1;

  uint64 max_delay = 2;

  double max_fee_percent = 3;
}

message PayInvoiceResponse {
  // The preimage of the invoice
  bytes preimage = 1;
}

message InterceptHtlcsRequest {
  message Subscribe {
    // The short channel id of HTLCs to intercept
    uint64 short_channel_id = 1;
  }

  message Settle {
    // The preimage for settling an intercepted HTLC
    bytes preimage = 1;
  }

  message Cancel {
    // The reason for the cancellation of an intercepted HTLC
    string reason = 1;
  }

  oneof action {
    // Request to subscribe to HTLCs with a specific short channel id
    //
    // Send this request when the gateway just assigned a new channel id to a
    // newly connected federation. GatewayLightning will respond with a stream
    // of intercept HTLCs for the gateway to process
    Subscribe subscribe = 1;

    // Request to complete an intercepted HTLC with success result after
    // processing
    //
    // Send this request when the gateway successfully processed intercepted
    // HTLC GatewayLightning will settle/resolve the intercepted HTLC with
    // reason provided.
    Settle settle = 2;

    // Request to complete an intercepted HTLC with failure result after
    // processing
    //
    // Send this request when the gateway failed or canceled processing of
    // intercepted HTLC. GatewayLightning will fail/cancel the intercepted HTLC
    // with reason provided.
    Cancel cancel = 3;
  }
}

message InterceptedHtlcResponse {

  // The HTLC payment hash.
  // Value is not guaranteed to be unique per intercepted HTLC
  bytes payment_hash = 1;

  // The incoming HTLC amount in millisatoshi.
  // This amount minus the `outgoing_amount_msat` is the fee paid for processing
  // this intercepted HTLC
  uint64 incoming_amount_msat = 2;

  // The outgoing HTLC amount in millisatoshi
  // This is the amount we should forward to the Federation if we successfully
  // process this intercepted HTLC
  uint64 outgoing_amount_msat = 3;

  // The incoming HTLC expiry
  // Determines block height when the node will automatically cancel and revert
  // the intercepted HTLC to sender if it is not settled.
  uint32 incoming_expiry = 4;

  // Reserved for getting more details about intercepted HTLC
  reserved 5 to 9;

  // The short channel id of the HTLC.
  // Use this value to confirm relevance of the intercepted HTLC
  uint64 short_channel_id = 10;
}
