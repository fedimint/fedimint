searchState.loadedDescShard("fedimint_gwv2_client", 0, "LNv2 CLTV Delta in blocks\nAn interface between module implementation and the general …\nFor the given <code>OperationId</code>, this function will wait until …\nUse the gateway’s lightning node to complete a payment\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDetermines if the payment can be completed using a direct …\nComputes the minimum contract amount necessary for making …\nInitiates a payment over the Lightning network.\n<code>ToString::to_string</code>, but without panic on OOM.\nState machine that completes the incoming payment by …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\nEvent that is emitted when a preimage is revealed to the …\nEvent that is emitted when an incoming payment attempt has …\nEvent that is emitted when an incoming payment attempt has …\nEvent that is emitted when an incoming payment attempt has …\nEvent that is emitted when an outgoing payment attempt has …\nEvent that is emitted when an outgoing payment attempt is …\nEvent that is emitted when an outgoing payment attempt has …\nComputes the <code>StructurePaymentEvents</code> for all LNv2 payments.\nThe reason the outgoing payment was cancelled.\nThe reason the incoming payment failed\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe commitment for the incoming contract.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe amount requested in the invoice.\nThe amount requested in the invoice.\nThe max delay of the payment in blocks.\nThe minimum amount that must be escrowed for the payment …\nThe timestamp that the operation begins, including the API …\nThe timestamp that the operation begins, including any …\nThe outgoing contract for this payment.\nThe payment image of the invoice that was paid.\nThe payment image of the invoice that failed.\nThe payment image of the invoice that was paid.\nThe payment image of the invoice that failed\nThe payment image of the invoice that was paid.\nThe target federation ID if a swap was performed, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.")