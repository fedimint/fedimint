searchState.loadedDescShard("fedimint_mint_server", 0, "Federated mint member mint\nQueries the database and returns all assets and …\nThis module’s contribution to the next consensus proposal\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructs a new mint\nSee <code>ServerModule::output_status</code>\nThis function is called once for every consensus item. The …\nTry to spend a transaction input. On success all necessary …\nTry to create an output (e.g. issue notes, peg-out BTC, …\nIndex for all the previously used blind nonces. Just a …\nAn iterator over the variants of DbKeyPrefix\nRepresents the amounts of issued (signed) and redeemed …\nTransaction id and output index identifying an output …\nIndex for all the spent e-cash note nonces to prevent …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert an iterator of anything into <code>FallibleIterator</code> by …\nConvert an iterator of <code>Result</code>s into <code>FallibleIterator</code> by …\n<code>ToString::to_string</code>, but without panic on OOM.")