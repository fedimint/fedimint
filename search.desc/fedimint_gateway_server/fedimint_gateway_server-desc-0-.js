searchState.loadedDescShard("fedimint_gateway_server", 0, "Name of the gateway’s database that is used for metadata …\nThe non-lightning default module types that the Gateway …\nDefault Bitcoin network for testing purposes.\nThe default number of route hints that the legacy gateway …\nContains the error value\nContains the error value\nHow long a gateway announcement stays valid\nName of the folder that the gateway uses to store its node …\nContains the success value\nContains the success value\nThe action to take after handling a payment stream.\nThe bcrypt password hash used to authenticate the gateway. …\nVerifies that the supplied <code>network</code> matches the Bitcoin …\nVerifies that the supplied <code>network</code> matches the Bitcoin …\nBuilder struct that allows the gateway to build a Fedimint …\nFor the LNv2 protocol, this will create an invoice by …\nRetrieves a BOLT11 invoice from the connected Lightning …\nReads and serializes structures from the Gateway’s …\nThe gateway’s federation manager.\nForwards a lightning payment to the next hop like a normal …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDatabase for Gateway metadata.\nA public key representing the identity of the gateway. …\nChecks the Gateway’s current state and returns the proper\nRetrieves the persisted <code>CreateInvoicePayload</code> from the …\nReturns a Bitcoin deposit on-chain address for pegging in …\nHandles a request for the gateway to backup a connected …\nInstructs the Gateway’s Lightning node to close all …\nHandles a connection request to join a new federation. The …\nCreates an invoice that is directly payable to the gateway…\nReturns the ecash, lightning, and onchain balances for the …\nIf the Gateway is connected to the Lightning node, returns …\nReturns information about the Gateway back to the client …\nRetrieves an invoice by the payment hash if it exists, …\nGenerates an onchain address to fund the gateway’s …\nHandle a request to have the Gateway leave a federation. …\nHandles an intercepted lightning payment. If the payment …\nReturns a list of Lightning network channels from the …\nHandles an authenticated request for the gateway’s …\nInstructs the Gateway’s Lightning node to open a channel …\nRequests the gateway to pay an outgoing LN invoice using …\nRequests the gateway to pay an outgoing LN invoice on …\nQueries the client log for payment events and returns to …\nComputes the 24 hour payment summary statistics for this …\nHandles a request to receive ecash into the gateway.\nTrigger rechecking for deposits on an address\nSend funds from the gateway’s lightning node on-chain …\nHandles a request to change the lightning or transaction …\nInstructs the gateway to shutdown, but only after all …\nReturns a Bitcoin TXID from a peg-out transaction for a …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nHelper function for determining if the gateway supports …\nHelper function for determining if the gateway supports …\nPolls the Gateway’s state waiting for it to shutdown so …\nThe mode that specifies the lightning connection parameters\nThe “module mode” of the gateway. Options are LNv1, …\nThe socket the gateway listens on.\nReads the connected federation client configs from the …\nReturns a <code>PublicKey</code> that uniquely identifies the Gateway.\nLoads a mnemonic from the database or generates a new one …\nThe Bitcoin network that the Lightning network is …\nHelper function for creating a gateway from either …\nCreates a new gateway but with a custom module registry …\nDefault function for creating a gateway with the <code>Mint</code>, …\nThe number of route hints to include in LNv1 invoices.\nRetrieves the <code>PublicKey</code> of the Gateway module for a given …\nLegacy mechanism for registering the Gateway with …\nRegisters the gateway with each specified federation.\nHandles a stream of incoming payments from the lightning …\nReturns payment information that LNv2 clients can use to …\nMain entrypoint into the gateway that starts the client …\nRetrieves a <code>ClientHandleArc</code> from the Gateway’s in memory …\nInstructs this gateway to pay a Lightning network invoice …\nHelper function for atomically changing the Gateway’s …\nBegins the task for listening for intercepted payments …\nThe current state of the Gateway.\nThe task group for all tasks related to the gateway.\nTries to handle a lightning payment using the legacy …\nTries to handle a lightning payment using the LNv2 …\nMap <code>gateway_lnrpc</code> protobuf types to rust types\nIterates through all of the federations the gateway is …\nVerifies that the gateway is not running on mainnet with …\nThe Gateway’s API URL.\nBuilds a new client with the provided <code>FederationConfig</code> and …\nReads a plain root secret from a database to construct a …\nConstructs the client builder with the modules, database, …\nDerives a per-federation secret according to Fedimint’s …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns a vector of “legacy” federations which did not …\nRecovers a client with the provided mnemonic. This …\nVerifies that the saved <code>ClientConfig</code> contains the expected …\nCommand line parameters for starting the gateway. <code>mode</code>, …\n<code>GatewayParameters</code> is a helper struct that can be derived …\nPublic URL from which the webserver API is reachable\nGateway webserver authentication bcrypt password hash\nPath to folder containing gateway config and data files\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe Lightning module to use: LNv1, LNv2, or both\nGateway webserver listen address\nBitcoin network this gateway will be running on\nNumber of route hints to return in invoices\nConverts the command line parameters into a helper struct …\nEnvironment variable that instructs the gateway to run in …\nEnvironment variable that specifies the URL that clients …\nEnvironment variable that specifies the bcrypt password …\nEnvironment variable that specifies the directory of the …\nEnvironment variable that specifies the “module mode” …\nEnvironment variable that specifies the address the gateway…\nEnvironment variable that specifies the mnemonic that the …\nEnvironment variable that specifies that Bitcoin network …\nEnvironment variable that instructs the gateway to skip …\nEnvironment variable that instructs the gateway to skip …\nEnvironment variable that instructs the gateway how many …\nErrors that authenticated endpoints can encounter. Full …\nPublic error that indicates the requested federation is …\nErrors that can occur during the LNv1 protocol. LNv1 …\nErrors that can occur during the LNv2 protocol. LNv2 …\nErrors that unauthenticated endpoints can encounter. For …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSearches through the event log for all events that …\nThe first index that the gateway will assign to a …\nMap of <code>FederationId</code> -&gt; <code>Client</code>. Used for efficient …\nReturns the argument unchanged.\nMap of federation indices to <code>FederationId</code>. Use for …\nCalls <code>U::from(self)</code>.\nTracker for federation index assignments. When connecting …\nIterates through all of the federations the gateway is …\nWaits for ongoing incoming LNv1 and LNv2 payments to …\nGenerate deposit address\nMiddleware to authenticate an incoming request. Routes …\nBackup a gateway actor state\nDisplay high-level information about the Gateway config\nConnect a new federation\nExtracts the Bearer token from the Authorization header of …\nDisplay high-level information about the Gateway\nDisplay high-level information about the Gateway\nLeave a federation\nPublic routes that are used in the LNv1 protocol\nPublic routes that are used in the LNv2 protocol\nCreates the webserver’s routes and spawns the webserver …\nGateway Webserver Routes. The gateway supports three types …\nWithdraw from a gateway federation.\nUtility struct for formatting an intercepted HTLC. Useful …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")