searchState.loadedDescShard("fedimint_core", 0, "Fedimint Core library\nRepresents an amount of BTC. The base denomination is …\nAmount of bitcoin to send, or <code>All</code> to send all available …\nTrait which applies to hashes of all types.\nThe byte array that represents the hash internally.\nFlag indicating whether user-visible serializations of …\nA hashing engine which bytes can be serialized into. It is …\n<code>InPoint</code> represents a globally unique input in a transaction\nLength of the hash, in bytes.\nThe number of guardians in a federation.\nTypes that can be easily converted to <code>NumPeers</code>\n<code>OutPoint</code> represents a globally unique output in a …\nA transaction id for peg-ins, peg-outs and reissuances\nExample\nAdmin (guardian) client types\nReturns an all zero hash.\nBitcoin amount types\nMostly re-exported for <code>Decodable</code> macros.\nReturns a reference to the underlying byte array.\nasync trait that use MaybeSend\nFederation-stored client backups Federation-stored client …\nBase 32 encoding\nLegacy serde encoding for <code>bls12_381</code>\nFederation configuration\nFundamental types Fedimint Core API (common) module …\nDatabase handling Core Fedimint database traits and types\nDefine “dyn newtype” (a newtype over <code>dyn Trait</code>)\nImplements the <code>Display</code> trait for dyn newtypes whose traits …\nImplement <code>Clone</code> on a “dyn newtype”\nConsensus encoding Binary encoding interface suitable for …\nConstructs a new engine.\nCommon environment variables\nMacro for defining module associated types.\nGet value of <code>FEDIMINT_BUILD_CODE_VERSION</code> at compile time\nFormatting helpers\nOutputs hex into an object implementing <code>fmt::Write</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a hash from the underlying byte array.\nProduces a hash from the current state of a given engine.\nCopies a byte slice into a hash object.\nGets the (approximate) network from a bitcoin address.\nHashes some bytes.\nHashes all the byte slices retrieved from the iterator …\nThis is a helper macro that generates the implementations …\nAs a transaction may have multiple inputs, this refers to …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFederation invite code\nCommon macros\nMaybeSync can not be used in <code>dyn $Trait + MaybeSend</code>\nSee <code>maybe_add_send</code>\nExtendable module sysystem Core module system traits and …\nDefine a “module plugin dyn-newtype” which is like a …\nImplement <code>Encodable</code> and <code>Decodable</code> for a “module dyn …\nDefine a “plugin” trait\nA copy of <code>module_lugin_static_trait_define</code> but for …\nShorthand for <code>Amount::from_msats</code>\nPeer networking\nAs a transaction may have multiple outputs, this refers to …\n<code>PeerId</code> type\nImplements the necessary traits for all associated types …\nImplements the necessary traits for all configuration …\nRuntime (wasm32 vs native) differences handling Copyright …\nShorthand for <code>Amount::from_sats</code>\nAtomic BFT unit containing consensus items\nTask handling, including wasm safe logic\nTypes handling per-denomination values\nTypes handling multiple per-denomination values\nTime handling, wasm safe functionality\nTiming helpers\nReturns the underlying byte array.\nFedimint transaction (inpus + outputs + signature) types\nThe referenced transaction ID\nThe referenced transaction ID\nPeg-in txo proofs\nGeneral purpose utilities\nVersion\nConverts weight to virtual bytes, defined in BIP-141 as …\nServer needs a password to read configs\nWaiting for peers to share the config gen params\nSent by admin user to the API\nWe failed running config gen\nConsensus is running\nConsensus is running\nConnection information sent between peers in order to …\nReady to run config gen once all peers are ready\nThe state of the server returned via APIs\nThe state of the server returned via APIs\nRestarted setup. All peers need to sync on this state …\nWaiting for peers to share the config gen params\nWe have verified all our peer configs\nConfig is generated, peers should verify the config\nAPI for secure websocket requests\nTLS cert is necessary for P2P auth during DKG and  …\nFederation name set by the leader\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nURL of “leader” guardian to send our connection info to\nName of the peer, used in TLS auth\nName of the peer, used in TLS auth\nOur guardian name\nP2P is the network for running DKG and consensus\nStatus of the peer if known\nRepresents an amount of BTC. The base denomination is …\nReturns an error if the amount is more precise than …\nCreate an amount from a number of whole bitcoins.\nCreate an amount from a number of millisatoshis.\nCreate an amount from a number of satoshis.\nParse a decimal string as a value in the given …\nShorthand for <code>Amount::from_msats</code>\nShorthand for <code>Amount::from_sats</code>\nStatistics about backups stored in the federation\nKey used to store user’s ecash backups\nUser’s backup, received at certain time, containing …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLowercase RFC 4648 Base32hex alphabet (32 characters).\nDecodes a base 32 string back to raw bytes. Returns an …\nEncodes the input bytes as Base32 (hex variant) using …\nThis limits the RAM consumption of a AlephBFT Unit to …\nTotal client config\nTotal client config v0 (&lt;0.4.0). Does not contain …\nConfig for the client-side of a particular Federation …\nType erased <code>ModuleInitParams</code> used to generate the …\nConsensus parameters for config generation\nShared consensus-critical config\nEmpty struct for if there are no params\nThe federation id is a copy of the authentication …\nPrefix of the <code>FederationId</code>, useful for UX improvements\nFederation-wide client config\nFederation-wide client config\nClient config that cannot be cryptographically verified …\n<code>serde_json::Value</code> that must contain <code>kind: String</code> field\nLocally configurable parameters for config generation\nLocal non-consensus, not security-sensitive settings\nKey under which the federation name can be sent to client …\nPrivate for this federation member data that are security …\nConfig for the server-side of a particular Federation …\nRegistry that contains the config gen params for all …\nModule (server side) config, typed\nConsensus-critical part of a server side module config\nAPI endpoints for each federation member\nAPI endpoints for each federation member\nGet decoders for <code>modules</code> and skip unsupported ones\nSigning session keys for each federation member Optional …\n0.4.0 and later uses a hash of broadcast public keys to …\nReturns the consensus hash for a given client config\nCore consensus version\nCore consensus version\nGet decoders for <code>modules</code> and fail if any is unsupported\nRandom dummy id for testing\nFederation name from config metadata (if set)\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAssemble from the distinct parts\nAssemble from the three functionally distinct parts\n(soft-deprecated): Get the first instance of a module of a …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the value of a given meta field\nAdditional config the federation wants to transmit to the …\nAdditional config the federation wants to transmit to the …\nThe peer’s name\nSee <code>DynRawFallback::redecode_raw</code>.\nTurn the typed config into type-erased version\nConverts a federation id to a public key to which we know …\nConverts a consensus-encoded client config struct to a …\nSplit the config into its distinct parts\nSplit the config into its three functionally distinct parts\nConverts the JSON into typed version, errors unless both …\nThe peer’s public URL (e.g. <code>wss://fedimint-server-1:5000</code>)\nWorkaround for a serde <code>flatten</code> quirk\nConsensus encoding decoder for module-specific types\nAn owned, immutable input to a <code>Transaction</code>\nAn owned, immutable input to a <code>Transaction</code>\nAn owned, immutable output of a <code>Transaction</code> before it was …\nAn owned, immutable output of a <code>Transaction</code>\nAn owned, immutable output of a <code>Transaction</code> before it was …\nThe type erased version of the type implementing this trait\nA type used by when decoding dyn-types, when the module is …\nSomething that can be an <code>DynInput</code> in a <code>Transaction</code>\nSomething that can be an <code>DynOutput</code> in a <code>Transaction</code>\nA type that has a <code>Dyn*</code>, type erased version of itself\nSpecial IDs we use for global dkg\nModule instance ID\nA type of a module\nUnique identifier for one semantic, correlatable operation.\nCreates a <code>DecoderBuilder</code> to which decoders for single …\nDecodes a specific <code>DynType</code> from the <code>reader</code> byte stream.\nLike <code>Self::decode_complete</code> but does not verify that all …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert <code>self</code> into its type-erased equivalent\nGenerate random <code>OperationId</code>\nAttach decoder for a specific <code>Type</code>/<code>DynType</code> pair where …\nMaximum payload size of a backup request\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nError returned when the autocommit function fails\nBase functionality around <code>IRawDatabase</code> to make it a …\nStruct that implements <code>IRawDatabaseTransaction</code> and can be …\n<code>DbMigrationFn</code> used by core client\nError returned by the closure provided to <code>autocommit</code>. If …\nCommitting the transaction failed too many times, giving up\nA helper for tracking and logging on <code>Drop</code> any instances of …\nSession type for <code>DatabaseTransaction</code> that is allowed to …\nA public-facing newtype over <code>IDatabase</code>\n<code>DatabaseKey</code> that represents the lookup structure for …\nMarker trait for <code>DatabaseKey</code>s where <code>NOTIFY</code> is true\nA key that can be used to query one or more <code>DatabaseRecord</code> …\nA key + value pair in the database with a unique prefix …\nA high level database transaction handle\n<code>DatabaseValue</code> that represents the value structure of …\nDeprecated: Use <code>DatabaseVersionKey(ModuleInstanceId)</code> …\nAn iterator over the variants of DbKeyPrefix\n<code>CoreMigrationFn</code> that modules can implement to “migrate”…\nContext passed to the db migration <em>functions</em> (pay …\n<code>DbMigrationFn</code> with no extra context (ATM gateway)\nCode used to access <code>global_dbtx</code>\nA database that on top of a raw database operation, …\nFedimint database transaction\nAdditional operations (only some) database transactions …\nCore raw a operations database transactions supports\nLike <code>IDatabaseTransactionOpsCore</code>, but typed\nRaw database implementation\nAn extension trait with convenience operations on …\nRaw database transaction (e.g. rocksdb implementation)\nSend a notification to tasks waiting to be notified if the …\nSession type for a <code>DatabaseTransaction</code> that is not allowed …\nJust ignore this type, it’s only there to make compiler …\nA database that wraps an <code>inner</code> one and adds a prefix to …\nA database transactions that wraps an <code>inner</code> one and adds a …\nA raw database transaction type\nA database type that has decoders, which allows it to …\n<code>apply_migrations</code> iterates from the on disk database …\nRuns a closure with a reference to a database transaction …\nStart a database transaction\nStart a database transaction\nBegin a new committable database transaction\nBegin a new non-committable database transaction\nCheckpoints the database to a backup directory\nCommit the transaction\nCreates the <code>DatabaseVersion</code> inside the database if it does …\n<code>Err</code> if <code>Self::is_global</code> is not true\n<code>Err</code> if <code>Self::is_global</code> is not true\n<code>Err</code> if <code>Self::is_global</code> is true\n<code>Err</code> if <code>Self::is_global</code> is true\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalculate an access code for accessing global_dbtx from a …\nVerifies that all database migrations are defined …\nDoes the dbtx have any writes\nCancel the tx to avoid debugging warnings about …\nDon’t warn-log uncommitted writes\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert to type implementing <code>IRawDatabase</code> into <code>Database</code>.\nConvert into a non-committable version\nIs the dbtx committed\nThe prefix len of this database refers to the global (as …\nIs global database\nIs this <code>Database</code> a global, unpartitioned <code>Database</code>\nIs this <code>Database</code> a global, unpartitioned <code>Database</code>\nHelper function to retrieve the <code>module_instance_id</code> for …\nCreates a new Fedimint database from any object …\nCreate <code>Database</code> from an already typed-erased <code>IDatabase</code>.\nNotify about <code>key</code> update (creation, modification, deletion)\nRegister a hook that will be run after commit succeeds.\nReturns an stream of key-value pairs with keys that start …\nSame as <code>Self::raw_find_by_prefix</code> but the order is …\nReturns an stream of key-value pairs with keys within a …\nGet key value\nInsert entry\nDelete keys matching prefix\nRemove entry by <code>key</code>\nRegister (and wait) for <code>key</code> updates\nRemoves <code>DatabaseVersion</code> from <code>DatabaseVersionKeyV0</code> if it …\nCreate a savepoint during the transaction that can be …\nGet <code>DatabaseTransaction</code> to <code>self</code>\nGet a reference to a non-committeable version\nGet <code>DatabaseTransaction</code> isolated to a <code>prefix</code> of <code>self</code>\nWaits for key to be notified.\nWaits for key to be present in database.\nCreate warnings about uncommitted writes\nGet <code>DatabaseTransaction</code> isolated to a <code>prefix</code>\nCreate <code>Database</code> isolated to a partition with a given <code>prefix</code>\nGet <code>DatabaseTransaction</code> isolated to a prefix of a given …\nCreate <code>Database</code> isolated to a partition with a prefix for …\nNumber of attempts\nThe attempt on which the closure returned an error\nError returned by the closure\nLast error on commit\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNumber of buckets used for <code>Notifications</code>.\nThe state of Notification.\nSave notifications to be sent after transaction is …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNotify a key.\nThis registers for notification when called.\nNotifies the waiters about the notifications recorded in …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA writer counting number of bytes written to it\nData which can be encoded in a consensus-consistent way\nObject-safe trait for things that can encode themselves\nA type that decodes <code>module_instance_id</code>-prefixed <code>T</code>s even …\nData which can be encoded in a consensus-consistent way\nMaximum size, in bytes, of data we are allowed to ever …\nSerde implementations using hex-encoded encodables\nDecode an object from hex\nDecode an object with a well-defined format.\nDecode <code>Self</code> from a size-limited reader.\nEncode an object with a well-defined format. Returns the …\nEncode and convert to hex string representation\nEncode without storing the encoding, return the size\n<code>Self::consensus_encode</code> to newly allocated <code>Vec&lt;u8&gt;</code>\nGenerate a SHA256 hash of the consensus encoding using the …\n<code>Self::consensus_hash</code> for <code>bitcoin::hashes::sha256::Hash</code>\nReturns the number of bytes successfully written so far\nGet the decoded <code>T</code> or <code>None</code> if not decoded yet\nConvert into the decoded <code>T</code> and panic if not decoded yet\nGet the decoded <code>T</code> and panic if not decoded yet\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAttempt to re-decode raw values with new set of of <code>modules</code>\nA writer counting number of bytes written to it\nWrap buffering support for implementations of Read. A …\nWrapper around <code>bitcoin::Network</code> that encodes and decodes …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a <code>BufBitcoinReader</code> which will read from the given …\nConfiguration for the bitcoin RPC\nEnv var that can be set to point at the bitcoind’s …\nEnv var how often to poll bitcoin source\nEnv var for bitcoin RPC kind (obsolete, use FM_DEFAULT_* …\nEnv var for bitcoin URL (obsolete, use FM_DEFAULT_* …\nEnv var for bitcoin RPC kind (default, used only as a …\nEnv var for bitcoin URL (default, used only as a default …\nEnv var for bitcoin RPC kind (forced, takes priority over …\nEnv var for bitcoin URL (default, takes priority over …\n<code>devimint</code> will set when code is running inside <code>devimint</code>\nEnv var to override iroh connectivity\nIn tests we want to routinely enable an extra unknown …\nList of json api endpoint sources to use as a source of …\nEnv var to override tcp api connectivity\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCheck if env variable is set and not equal <code>0</code> or <code>false</code> …\nUse to allow <code>process_output</code> to process RBF withdrawal …\nUse to detect if running in a test environment, either …\nAll the items that may be produced during a consensus epoch\nAllows us to add new items in the future without crashing …\nAny data that modules require consensus on\nThreshold sign the epoch history for verification via the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA wrapper that causes the inner <code>T</code> to be debug-formatted …\nUse for displaying bytes in the logs\nUse for displaying potentially large <code>[serde_json::Value]</code>s …\nSomething that can be debug-formatted in an abbreviated way\nOptional stacktrace formatting for errors.\nFormat json object value truncating keys if there’s too …\nFormat json string value if it’s too long\nFormat json array value truncating elements if there’s …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAPI endpoint of one of the guardians\nApi secret to use\nWe can represent client invite code as a bech32 string for …\nUnknown invite code fields to be defined in the future\nAuthentication id for the federation\nInformation required for client to join Federation\nFor extendability <code>InviteCode</code> consists of parts, where …\nApi secret, if needed, to use when communicating with the …\nReturns the federation’s ID that can be used to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructs an <code>InviteCode</code> which contains as many guardian …\nReturns the id of the guardian from which we got the API …\nGet all peer URLs in the <code>InviteCode</code>\nReturns the API URL of one of the guardians.\nPeer id of the host from the Url\nURL to reach an API that we can download configs from\nAuthentication uses the hashed user password in PHC format\nDefinition of an API endpoint defined by a module <code>M</code>.\nState made available to all API endpoints for handling a …\nAll requests from client to server contain these fields\nApi version supported by a core server or a client/server …\nGlobally declared core consensus version\nLogic and constant common between server side and client …\nConsensus version of a core server\nOperations common to Server and Client side module gen dyn …\nModule associated types required by both client and server\nConsensus version of a specific module instance\nTrait implemented by every <code>*ModuleInit</code> (server or client …\nMultiple, disjoint, minimum required or maximum supported, …\nexample: /transaction\nA handle passed to <code>ServerModuleInit::distributed_gen</code>\nGlobal request ID used for logging\nCreates a struct that can be used to make our …\nSame as <code>SerdeModuleEncoding</code> but uses base64 instead of hex …\nA summary of server API versions for core and all …\nA summary of server database versions for all registered …\nInformation about the amount represented by an input or …\nSupported Api versions for this core consensus versions\nSupported Api versions for this core &amp; module consensus …\nExample\nHashed user password if the API requires authentication\nHashed user password if the API requires authentication\nAttempts to commit the dbtx or returns an <code>ApiError</code>\nDatabase tx handle, will be committed\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHandler for the API call that takes the following …\nWhether the request was authenticated as the guardian who …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMajor API version\nMinor API version\n<code>db</code> and <code>dbtx</code> should be isolated.\nParameters required by the API\nParameters required by the API\nPath under which the API endpoint can be reached. It …\nReturns the auth set on the request (regardless of whether …\nIn cases where we know exactly which module kind we expect …\nIn cases where we know exactly which module kind we expect …\nFedimint consensus and API versioning.\nWaits for key to be present in database.\nWaits for key to have a value that matches.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFallback to decoding unknown module instance ids as …\nCollection of decoders belonging to modules, typically …\nModule Registry hold module-specific data <code>M</code> by the …\nReject unknown module instance ids\nPanic if the <code>Self::decoding_mode</code> is not <code>Reject</code>\nPanic if the <code>Self::decoding_mode</code> is not <code>Reject</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet module data by instance id\nReturn the module data belonging to the module identified …\nGet module data by instance id, including <code>ModuleKind</code>\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn an iterator over all module data\nIs registry empty?\nReturn an iterator over all module data\nReturn an iterator over module ids an kinds\nReturn an iterator over all module data\nCreate <code>Self</code> from an iterator of pairs\nAdd a module to the registry\nApi version supported by a core server or a client/server …\nGlobally declared core consensus version\nConsensus version of a core server\nConsensus version of a specific module instance\nMultiple, disjoint, minimum required or maximum supported, …\nA summary of server API versions for core and all …\nA summary of server database versions for all registered …\nSupported Api versions for this core consensus versions\nSupported Api versions for this core &amp; module consensus …\nCreate <code>SupportedModuleApiVersions</code> from raw parts\nGet minor supported version by consensus and major numbers\nGet minor supported version by consensus and major numbers\nVerify the invariant: sorted by unique major numbers\nMajor API version\nMinor API version\nInsert <code>version</code> to the list of supported APIs\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOverride api URLs used by the client.\nReturns true if the signature is valid for the given …\nConnection manager that tries to keep connections open to …\nThis enum defines the intended recipient of a p2p message.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConvert the struct to trait object.\nAwait the next message; return None if we are shutting …\nAwait the next message from peer; return None if we are …\nSend message to recipient; block if channel is full.\nTry to send message to recipient; drop message if channel …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a fake link between <code>peer1</code> and <code>peer2</code> for test …\nThe number of guardians in a federation.\nTypes that can be easily converted to <code>NumPeers</code>\nReturns the degree of an underlying polynomial to require …\nReturns the number of guardians that can be evil without …\nReturns the number of guardians to select such that at …\nReturns an iterator over all peer IDs in the federation.\nReturns the number of guardians required to achieve …\nReturns the total number of guardians in the federation.\nTask failed to execute to completion.\nAn owned permission to join on a task (await its …\nAbort the task associated with the handle.\nReturns a new <code>AbortHandle</code> that can be used to remotely …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a task ID that identifies the task which errored …\nReturns a task ID that uniquely identifies this task …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes the join error, returning the object with which …\nReturns true if the error was caused by the task being …\nChecks if the task associated with this <code>JoinHandle</code> has …\nReturns true if the error was caused by the task panicking.\nConsumes the join error, returning the object with which …\nTask failed to execute to completion.\nAn owned permission to join on a task (await its …\nA consensus item accepted in the consensus\nItems ordered in a single session that have been accepted …\nA <code>SessionOutcome</code>, signed by the Federation.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nA blocks header consists of 40 bytes formed by its index …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOperation that can potentially get cancelled returning no …\nAn error used as a “cancelled” marker in <code>Cancellable</code>.\nContains the error value\n<code>MaybeSend</code> is no-op on wasm and <code>Send</code> on non wasm.\n<code>MaybeSync</code> is no-op on wasm and <code>Sync</code> on non wasm.\nContains the success value\nA group of task working together\nRun the future or cancel it if the <code>TaskGroup</code> shuts down.\nDid the future completed successfully (no panic)\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAdd a task to the group that waits for CTRL+C or SIGTERM, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs task group shutting down?\nJust-in-time initialization\nMake a <code>oneshot::Receiver</code> that will fire on shutdown\nCreate a sub-group\nTell all tasks in the group to shut down. This only …\nTell all tasks in the group to shut down and wait for them …\nSpawn a task that will get cancelled automatically on …\nThis is a version of <code>Self::spawn</code> that uses less noisy …\nWait for a task to finish.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA value that initializes eagerly in parallel in a …\nError that could have been returned before\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the reference to the value, potentially blocking for …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate <code>JitTry</code> value, and spawn a future <code>f</code> that computes …\nHelper to wait for actions to be <code>Self::done</code>\nMark this waiter as done.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCheck if Waiter was marked as done.\nWait for <code>Self::done</code> call.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerates denominations of a given base up to and …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the highest tier amount\nReturns a reference to the key of the specified tier\nRepresents notes of different denominations.\nReturns the number of items in all vectors\nReturns the number of tiers\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns an consuming iterator over every <code>(Amount, T)</code>\nVerifies whether all vectors in all tiers are empty\nReturns an borrowing iterator\nReturns an iterator over every <code>(Amount, &amp;T)</code>\nReturns a new <code>TieredMulti</code> with the given <code>BTreeMap</code> map\nReturns a new <code>TieredMulti</code> from a collection of <code>Tiered</code> …\nReturns the summary of number of items in each tier\nReturns the total value of all notes in msat as <code>Amount</code>\nReturns the duration since the Unix epoch\nData inside <code>TimeReporter</code>, in another struct to be able to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nInner data\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAdd a threshold, which will log a warning if exceeded\nHandy alias for <code>Self::threshold</code>\nMaximum size that a transaction can have while still …\nThe transaction caused an overflow.\nAn atomic value transfer operation within the Fedimint …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\n<code>DynInput</code>s consumed by the transaction\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNo defined meaning, can be used to send the otherwise …\n<code>DynOutput</code>s created as a result of the transaction\nsignatures for all the public keys of the inputs\nHash of the transaction (excluding the signature).\nGenerate the transaction hash.\nValidate the schnorr signatures signed over the <code>tx_hash</code>\nA transaction id for peg-ins, peg-outs and reissuances\nReturns a reference to the inner hash (sha256, sh256d …\nCreates this wrapper type from the inner hash type.\nReturns the inner hash (sha256, sh256d etc.).\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nFuture that is <code>Send</code> unless targeting WASM\nStream that is <code>Send</code> unless targeting WASM\nSimple utility trait to print error chains\nSimple utility trait to print error chains (for …\nA wrapper with <code>fmt::Display</code> for <code>anyhow::Error</code> that will …\nA wrapper with <code>fmt::Display</code> for any <code>E : Error</code> that will …\nWrapper for <code>Url</code> that only prints the scheme, domain, port …\nWarning: This will expose username &amp; password if present.\nCopied from <code>tokio_stream</code> 0.1.12 to use our optional Send …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nComputes the average of the given <code>u64</code> slice.\nComputes the median from a slice of sorted <code>u64</code>s\nFor CLIs, detects <code>version-hash</code> as a single argument, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRun the supplied closure <code>op_fn</code> until it succeeds. …\nWarning: This removes the safety.\nWrite out a new file (like <code>std::fs::write</code> but fails if …\nBackoff is an <code>Iterator</code> that returns <code>Duration</code>.\nA backoff strategy for relatively quick foreground …\nBackoff strategy for background tasks.\nRetry every max 10s for up to one hour, with a more …\nA wrapper around <code>tokio::sync::broadcast::Receiver</code> that …\nAn error returned from the inner stream of a …\nThe receiver lagged too far behind. Attempting to receive …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new <code>BroadcastStream</code>.\nWaits for the next item in a stream. If the stream is …\nWaits for the next item in a stream. If the stream is …\nSimple utility trait to print error chains\nSimple utility trait to print error chains (for …\nA wrapper with <code>fmt::Display</code> for <code>anyhow::Error</code> that will …\nA wrapper with <code>fmt::Display</code> for any <code>E : Error</code> that will …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMerges concurrent futures execution.\nGet the  cargo package version of <code>fedimint-core</code>\nGet the git hash version of <code>fedimint-core</code>")