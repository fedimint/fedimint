searchState.loadedDescShard("fedimint_lightning", 0, "A trait that the gateway uses to interact with a lightning …\nRepresents an active connection to the lightning node.\nCloses all channels with a peer lightning node.\nCompletes an HTLC that was intercepted by the gateway. …\nRequests the lightning node to create an invoice. The …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a summary of the lightning node’s balance, …\nGets a funding address belonging to the lightning node’s …\nReturns high-level info about the lightning node.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLists the lightning node’s active channels with all …\nOpens a channel with a peer lightning node.\nRetrieves the basic information about the Gateway’s …\nRetrieve route hints from the Lightning node, capped at …\nAttempts to pay an invoice using the lightning node, …\nAttempts to pay an invoice using the lightning node, …\nConsumes the current client and returns a stream of …\nReturns route hints to the lightning node.\nExecutes an onchain transaction using the lightning node’…\nReturns true if the lightning backend supports payments …\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\nWaits for the Lightning node to be synced to the Bitcoin …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nWhen a port is specified in the Esplora URL, the esplora …\nMaps LDK’s <code>PaymentKind</code> to an optional preimage and an …\nThe HTLC stream, until it is taken by calling …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>GatewayLdkClient</code> instance and starts the …\nThe underlying lightning node.\nLock pool used to ensure that our implementation of …\nLock pool used to ensure that our implementation of …\n<code>ToString::to_string</code>, but without panic on OOM.\nUtility struct for logging payment hashes. Useful for …\nLND client\nCancels a HOLD invoice that is specified by the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSettles a HOLD invoice that is specified by the …\nSpawns background tasks for monitoring the status of …\nSpawns a new background task that intercepts HTLCs from …\nSpawns a new background task that subscribes to updates of …\nSpawns a new background task that subscribes to “add” …\nReturns true if the lightning backend supports payments …\n<code>ToString::to_string</code>, but without panic on OOM.")