searchState.loadedDescShard("fedimint_client_module", 0, "Admin (guardian) identification and authentication\nResources particular to a module instance\nGlobal state and functionality provided to all state …\nContains the error value\nSomething that can be an <code>DynInput</code> in a <code>Transaction</code>\nSomething that can be an <code>DynOutput</code> in a <code>Transaction</code>\nModule instance ID\nA type of a module\nContains the success value\nUnique identifier for one semantic, correlatable operation.\nAllows adding state machines from inside a transition to …\nAdds a state machine to the executor.\nReturns a reference to the client’s federation API …\nModule-specific API\nAuthentication details\nWaits for the transaction to be accepted or rejected as …\nNot sure why I couldn’t just directly call <code>Box::new</code> ins …\nThis function is mostly meant for internal use, you are …\nModule-specific DB\nEnvironment variables\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a transaction with the supplied output and funding …\nThis function is mostly meant for internal use, you are …\nInstance id of the module\nGet a reference to the module\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nModule client interface definitions\nReturned a reference client’s module API client, so that …\nGenerate random <code>OperationId</code>\nOperation log subsystem of the client\nGuardian’s own <code>peer_id</code>\nSecret handling &amp; derivation\nClient state machine interfaces and executor implementation\nStructs and interfaces to construct Fedimint transactions\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\nEvent log event right after an api call\nEvent log event right before making an api call\nA wrapper over <code>IRawFederationApi</code> adding client side event …\nConvenience extension trait used for wrapping …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>ClientMigrationFn</code> is a function that modules can implement …\nHelper function definition for migrating a single state.\nMigrates a particular state by looping over all active and …\nMeta source can retry infinitely.\nMeta source should return fast, retry less. This blocks …\nLegacy non-meta module config source uses client config …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWait for next change in this source.\nData stored in regular backups so that restoring doesn’t …\nA Client context for a <code>ClientModule</code> <code>M</code>\nA fedimint-client interface exposed to client modules\nA reference back to itself that the module cacn get from …\nFedimint module client\nCommon module types shared between client and server\nA final, fully initialized client\nType-erased version of <code>ClientModule</code>\nA contiguous range of input/output indexes\nData and API clients available to state machine …\nAll possible states this client can submit to the executor\nWaits for the funds from an output created by …\nCreates all inputs and outputs necessary to balance the …\nA set of all decoders of all modules of the client\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a temporary strong reference to <code>ClientContextIface</code>\nReturns the balance held by this module and available for …\nReturns an invite code for the federation that points to …\nGet a reference to a global Api handle\nGet global db.\nReturns the fee the processing of this input requires.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert an iterator of anything into <code>FallibleIterator</code> by …\nLeave the federation\nTurn a typed <code>ClientInputBundle</code> into a dyn version\nTurn a typed <code>ClientOutputBundle</code> into a dyn version\nTurn a <code>typed</code> into a dyn version\nTurn a typed input into a dyn version\nTurn a typed output into a dyn version\nThis method starts n state machines with given operation …\nSee <code>Self::manual_operation_start</code>, just inside a database …\nGet a reference to a module Api handle\nReturns the fee the processing of this output requires.\nGet a reference back to client module from the <code>Self</code>\nInitialize client.\nReturns a stream that will output the updated module …\nDoes this module support being a primary module\nConvert an iterator of <code>Result</code>s into <code>FallibleIterator</code> by …\nGet the <code>ClientContext</code> for later use\nGet the <code>ClientContext</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nRetrieves the database migrations from the module to be …\nInitialize a <code>ClientModule</code> instance from its config\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRecover the state of the client module, optionally from an …\nRun recover of a module from federation consensus history\nApi versions of the corresponding server side module’s …\nDb prefixes used by the module\n<code>ClientModuleInit</code> of this recovery logic.\nModule specific logic for …\nCommon state tracked during recovery from history\nDelete the recovery state from the database\nFinalize the recovery converting the tracked state to final\nReturns the argument unchanged.\nHandle transaction input, adjusting the current state\nHandle transaction output, adjusting the current state\nHandle session outcome, adjusting the current state\nHandle session outcome, adjusting the current state\nCalls <code>U::from(self)</code>.\nTry to load the existing state previously stored with …\nRead the finalization status\nNew empty state to start recovery from, and session number …\nCalled before <code>finalize_dbtx</code>, to allow final state changes …\nStore the current recovery state in the database\nStore finalization status\nA backup type for modules without a backup implementation. …\nProgress of the recovery\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>ToString::to_string</code>, but without panic on OOM.\nJson value using string representation as db encoding.\nRepresents an operation triggered by a user, typically …\nRepresents the outcome of an operation, combining both the …\nEither a stream of operation updates if the operation hasn…\nAwaits the outcome of the operation update stream, either …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a stream no matter if the operation is finished. …\nReturns the meta data of the operation. This is a JSON …\nReturns the kind of the module that generated the operation\nReturns the last state update of the operation, if any was …\nReturns the time when the outcome was cached.\nType representing the secret\nJust uses 64 random bytes and derives the secret from them\nTrait defining a way to generate, serialize and …\nDeserialization function for the external encoding\nSerialization function for the external encoding\nReturns the argument unchanged.\nConvenience function to derive fedimint-client root secret …\nCalls <code>U::from(self)</code>.\nRandom generation function for the external secret type\nConversion function from the external encoding to the …\nA transaction that acts as isolated for module code but …\nAdditional data made available to state machines of a …\nA shared context for a module client state machine\nA type-erased state of a state machine belonging to a …\nObject-safe version of <code>State</code>\nAdditional resources made available in this module’s …\nState transition notifier for a specific module instance …\nImplementors act as state machines that can be executed\nRepresents one or multiple possible state transitions …\n<code>S</code> limits the type of state that can be subscribed to the …\nClone state\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOperation this state machine belongs to. See <code>OperationId</code> …\nOperation this state machine belongs to. See <code>OperationId</code> …\nState machine state interface\nState transition function that, using the output of the …\nAll possible transitions from the current state to other …\nAll possible transitions from the state\nFuture that will block until a state transition is …\nA transaction that acts as isolated for module code but …\nReturns the isolated database transaction for the module.\nA state that is able to make progress eventually\nA past or final state of a state machine\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nState transition notifier for a specific module instance …\n<code>S</code> limits the type of state that can be subscribed to the …\nSubscribe to state transitions belonging to an operation …\nSubscribe to all state transitions belonging to the module …\nAdditional data made available to state machines of a …\nA shared context for a module client state machine\nA type-erased state of a state machine belonging to a …\nSomething that can be a <code>DynContext</code> for a state machine\nObject-safe version of <code>State</code>\nAdditional resources made available in this module’s …\nImplementors act as state machines that can be executed\nRepresents one or multiple possible state transitions …\nClone state\n<code>true</code> if this state allows no further transitions\nCreates a new <code>StateTransition</code> where the <code>trigger</code> future …\nOperation this state machine belongs to. See <code>OperationId</code> …\nOperation this state machine belongs to. See <code>OperationId</code> …\nState transition function that, using the output of the …\nAll possible transitions from the current state to other …\nAll possible transitions from the state\nFuture that will block until a state transition is …\nThe transaction has been accepted in consensus\nA group of inputs and state machines responsible for …\nThe transaction has been created and potentially already …\nA fake <code>sm::Context</code> for <code>NeverClientStateMachine</code>\nA fake <code>sm::State</code> that can actually never happen.\nThe transaction has been rejected by a quorum on submission\nReserved module instance id used for client-internal state …\nState machine to (re-)submit a transaction until it is …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nState machine for submitting transactions\nA group of inputs and state machines responsible for …\nA fake <code>sm::Context</code> for <code>NeverClientStateMachine</code>\nA fake <code>sm::State</code> that can actually never happen.\nFind the range of indexes in an monotonically increasing …\nA version of <code>Self::new</code> for times where input does not …\nA version of <code>Self::new</code> for times where output does not …\nThe transaction has been accepted in consensus\nThe transaction has been created and potentially already …\nThe transaction has been rejected by a quorum on submission\nReserved module instance id used for client-internal state …\nState machine to (re-)submit a transaction until it is …")