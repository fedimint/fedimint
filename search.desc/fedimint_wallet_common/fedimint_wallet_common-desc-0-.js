searchState.loadedDescShard("fedimint_wallet_common", 0, "A raw scriptpubkey (including pay-to-pubkey) under Legacy …\nTo further mitigate the risk of a peg-out transaction …\nPay-to-PubKey-Hash\nAllows a user to bump the fees of a <code>PendingTransaction</code>\nModule consensus version that introduced support for …\nPay-to-ScriptHash(includes nested wsh/wpkh/sorted multi)\nPay-to-Taproot\nA transaction output, either unspent or consumed\nContains the Bitcoin transaction id of the transaction …\nSummary of the coins within the wallet.\nPay-to-Witness-PubKey-Hash\nPay-to-Witness-ScriptHash with Segwitv0 context\nFees expressed as an increase over existing peg-out fees\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAll change UTXOs from peg-out transactions that are either …\nAll transaction outputs from peg-out transactions that are …\nAll UTXOs available as inputs for transactions\nTotal amount of immediately spendable UTXOs and pending …\nTotal amount of all change UTXOs from peg-out transactions …\nTotal amount of all transaction outputs from peg-out …\nTotal amount of all spendable UTXOs\nTotal amount of all change UTXOs from peg-out transactions …\nTotal amount of all transaction outputs from peg-out …\nTotal amount of all change UTXOs from peg-out transactions …\nTotal amount of all transaction outputs from peg-out …\nBitcoin tx id to bump the fees for\nChange UTXOs created from peg-out transactions that have …\nTransaction outputs consumed in peg-out transactions that …\nChange UTXOs created from peg-out transactions that have …\nTransaction outputs consumed in peg-out transactions that …\nHelps against dust attacks where an attacker deposits …\nConfigures which bitcoin RPC to use\nSee <code>WalletConfigConsensus::client_default_bitcoin_rpc</code>.\nPoints to a Bitcoin API that the client can use to …\nPoints to a Bitcoin API that the client can use to …\nIf we cannot determine the feerate from our bitcoin node, …\nFees to be charged for deposits and withdraws <em>by the </em>…\nFees for bitcoin transactions\nHow many bitcoin blocks to wait before considering a …\nConfirmations required for a peg in to be accepted by …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBitcoin network (e.g. testnet, bitcoin)\nThe bitcoin network the client will use\nThe public keys for the bitcoin multisig\nThe federations public peg-in-descriptor\nThe federations public peg-in-descriptor\nSecret key for signing bitcoin multisig transactions\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAn object that can be used as a Ricardian contract to …\nA key or object containing keys that may be tweaked for …\nSerialize the contract in a deterministic way to be used …\nTweak the key with a <code>tweak</code> contract\nA proof about a script owning a certain output. Verifiable …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")