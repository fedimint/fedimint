searchState.loadedDescShard("fedimint_meta_server", 0, "Meta module\nParameters necessary to generate this module’s …\nConsensus parameters for config generation\nLocal parameters for config generation\nGenerates the module\nQueries the database and returns all assets and …\nThis module’s contribution to the next consensus proposal\nCheck the difference between what’s desired vs submitted …\nGenerates configs for all peers in an untrusted manner\nDumps all database items for debugging\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts the consensus config into the client config\nDB migrations to move from old to newer versions\nInitialize the module\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSee <code>ServerModule::output_status</code>\nBUG: This implementation fails to return an <code>Err</code> on …\nThis function is called once for every consensus item. The …\nTry to spend a transaction input. On success all necessary …\nTry to create an output (e.g. issue notes, peg-out BTC, …\nGenerates configs for all peers in a trusted manner for …\nReturns the version of this module\nCurrent consensuson\nNamespaces DB keys for this module\nAn iterator over the variants of DbKeyPrefix\nHow we want to vote\nCurrent submitted votes\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert an iterator of anything into <code>FallibleIterator</code> by …\nConvert an iterator of <code>Result</code>s into <code>FallibleIterator</code> by …")