searchState.loadedDescShard("fedimint_testing", 0, "Retrieves a BOLT11 invoice from the connected Lightning …\nReads and serializes structures from the Gateway’s …\nReturns the argument unchanged.\nReturns the argument unchanged.\nChecks the Gateway’s current state and returns the proper\nRetrieves the persisted <code>CreateInvoicePayload</code> from the …\nReturns a Bitcoin deposit on-chain address for pegging in …\nHandles a request for the gateway to backup a connected …\nInstructs the Gateway’s Lightning node to close all …\nHandles a connection request to join a new federation. The …\nReturns the ecash, lightning, and onchain balances for the …\nIf the Gateway is connected to the Lightning node, returns …\nReturns information about the Gateway back to the client …\nRetrieves an invoice by the payment hash if it exists, …\nGenerates an onchain address to fund the gateway’s …\nHandle a request to have the Gateway leave a federation. …\nReturns a list of Lightning network channels from the …\nHandles an authenticated request for the gateway’s …\nInstructs the Gateway’s Lightning node to open a channel …\nQueries the client log for payment events and returns to …\nComputes the 24 hour payment summary statistics for this …\nHandles a request to receive ecash into the gateway.\nTrigger rechecking for deposits on an address\nSend funds from the gateway’s lightning node on-chain …\nHandles a request to change the lightning or transaction …\nInstructs the gateway to shutdown, but only after all …\nReturns a Bitcoin TXID from a peg-out transaction for a …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new gateway but with a custom module registry …\nDefault function for creating a gateway with the <code>Mint</code>, …\nReturns payment information that LNv2 clients can use to …\nMain entrypoint into the gateway that starts the client …\nRetrieves a <code>ClientHandleArc</code> from the Gateway’s in memory …\nIterates through all of the federations the gateway is …\nReturns the current block count\nReturns a transaction with the provided txid if it exists …\nWaits till tx is found in mempool and returns the fees\nReturns a new address.\nReturns the block height for the txid if found.\nMake the underlying instance act as if it was exclusively …\nMine a block to include any pending transactions then get …\nMines a given number of blocks\nPrepare funding wallet\nSend some bitcoin to an address then mine a block to …\nTracks how much bitcoin was sent to an address (doesn’t …\nSimulates mined bitcoin blocks\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a fake bitcoin transaction with given outputs\nSimulates pending transactions in the mempool\nSimulates the merkle tree proofs\nRegisters a fake bitcoin rpc factory for testing\nSimulates the script history\nTracks the block height a transaction was included\nFixture implementing bitcoin node under test by talking to …\nFixture implementing bitcoin node under test by talking to …\nFixture implementing bitcoin node under test by talking to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRPC used to connect to bitcoind, used for waiting for the …\nHelper function that recursively copies all contents from …\nGet the project root (relative to closest Cargo.lock file)\nCreates the database backup directory for a server module …\nCreate the database backup directory for a client module. …\nCreates the database backup for <code>snapshot_name</code> to …\nValidates the database migrations for a client module. …\nValidates the database migrations for the core client. …\nValidates the database migrations. <code>decoders</code> need to be …\nValidates the database migrations for a server module. …\nTest fixture for a running fedimint federation\nBuilder struct for creating a <code>FederationTest</code>.\nConnects a gateway to this <code>FederationTest</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn the federation id\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn first invite code for gateways\nReturns true if the federation is running in a degraded …\nCreate a new admin api for the given PeerId\nCreate a new admin client connected to this fed\nCreate a client connected to this fed\nCreate a client connected to this fed but using RocksDB …\nReturn all online PeerIds\nCreate two clients, useful for send/receive tests\nA tool for easily writing fedimint integration tests\nA default timeout for things happening in tests\nGet a test bitcoin fixture\nGet a client bitcoin RPC config\nGet a server bitcoin RPC config\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new <code>FederationTestBuilder</code> that can be used to …\nStarts a new federation with 3/4 peers online\nStarts a new federation with 4/4 peers online\nCreates a new Gateway that can be used for module tests.\nAdd a module to the fed\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates an invoice that is not payable")