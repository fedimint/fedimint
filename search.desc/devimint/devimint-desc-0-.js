searchState.loadedDescShard("devimint", 0, "Use builder syntax to set the inputs and finish with <code>call()</code>…\nFinishes building and performs the requested action.\neasy syntax to create a Command\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<em><strong>Optional</strong> (Some / Option setters).</em>\n<em><strong>Optional</strong> (Some / Option setters).</em>\n<em><strong>Optional</strong> (Some / Option setters).</em>\n<em><strong>Optional</strong> (Some / Option setters).</em>\nTools for manipulating the type state of …\nSpins up bitcoind, LDK Gateway, lnd w/ gateway, a faucet, …\nSpins up bitcoind and esplora.\nRpc commands to the long running devimint instance. Could …\nNumber of peers to allocate in every federation\nForce a base federations port, e.g. for convenience during …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a link to the test dir under this path\nNumber of federations to allocate for the test/run\nRun degraded federation with FM_OFFLINE_NODES shutdown\nDo not set up federation and stop at a pre-dkg stage\nDon’t set up new Federation, start from the state in …\nReturns the argument unchanged.\nReturns the argument unchanged.\nLike <code>Self::internal_client</code> but will check and wait for a …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMake <code>devimint</code> print stderr of called commands directly on …\nForce devimint to run a test with a deprecated …\nDevimint’s “data dir” (think <code>/usr/devimint/</code>).\nOverride LDK’s Lightning port\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the total number of blocks in the chain.\nGet a transaction by its txid. Checks the mempool and all …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPoll a transaction by its txid until it is found in the …\nPoll until bitcoind rpc responds for basic commands\nWait until the server is able to respond to requests.\nClient that can has wallet initialized, can generate …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<code>fedimint-cli</code> instance (basically path with client state: …\nWhich port is for api inside the range from …\nWhich port is for prometheus inside the range from …\nWhich port is for p2p inside the range from …\nWhich port is for the web ui inside the range from …\nNumber of ports we allocate for every <code>fedimintd</code> instance\nBuilt in <code>Client</code>, already joined\nCreate a <code>Client</code> that starts with a fresh state.\nMines enough blocks to finalize mempool transactions, then …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the current consensus session count\nBuilt-in, default, internal <code>Client</code>\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRead the invite code from the client data dir\nClient to join a federation\nCreate a <code>Client</code> that starts with a state that is a copy of …\nNew <code>Client</code> that already joined <code>self</code>\nClient to join a federation\nOpen or create a <code>Client</code> that starts with a fresh state.\nInititates multiple peg-ins to the same federation for the …\nInitiates multiple peg-outs from the same federation for …\nCoordinated shutdown of all peers that restart using the …\nClient to join a federation with a restore procedure\nStarts all peers not currently running.\nTerminates all running peers.\nReturns once all active state machines complete\nReturns once the current session completes\nReturns once the provided session count completes\nDuplicate default fedimint module setup\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOpen a channel with the gateway’s lightning node, …\nRestarts the gateway using the provided <code>bin_path</code>, which is …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRepresents a <code>State</code> that has <code>IsUnset</code> implemented for all …\nMarker trait that indicates that all required members are …\nMarker trait that indicates that the member is set, i.e. …\nMarker trait that indicates that the member is unset, i.e. …\nType state of the member <code>num_feds</code>.\nType state of the member <code>pre_dkg</code>.\nRepresents a <code>State</code> that has <code>IsSet</code> implemented for …\nRepresents a <code>State</code> that has <code>IsSet</code> implemented for …\nBuilder’s type state specifies if members are set or not …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<code>devfed</code> then tests that spent ecash cannot be double spent\n<code>devfed</code> then tests a bunch of the fedimint-cli commands\n<code>devfed</code> then reboot gateway daemon for both LDK and LND. …\nRestore guardian from downloaded backup\n<code>devfed</code> then checks the average latency of reissuing ecash, …\n<code>devfed</code> then pegin LND Gateway. Kill the LN node, restart …\n<code>devfed</code> then calls binary <code>fedimint-load-test-tool</code>. See …\n<code>devfed</code> then kills and restarts most of the Guardian nodes …\n<code>devfed</code> then tests if the recovery tool is able to do a …\nTests that client can detect federation config changes …\nTests that client info commands work when all federation …\nClients reused for upgrade tests\nTest upgrade paths for a given binary\n<code>devfed</code> then spawns faucet for wasm tests\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nModify server configuration files to add a new meta module …\nModify configuration files for a single peer to add a new …\nTest that client can detect federation config changes when …\nTest that client can init even when the federation is down\n<code>ToString::to_string</code>, but without panic on OOM.\nKills process when all references to ProcessHandle are …\nRun the command expecting an error, which is parsed using …\nReturns an Err if the command doesn’t return an error …\nReturns the json error if the command has a non-zero exit …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if running backwards-compatibility tests\nRun the command and get its output as json.\nRun the command and get its output as string.\nParses a version string returned from clap ex: fedimintd …\nRetry until <code>f</code> succeeds or default timeout is reached\nRetry until <code>f</code> succeeds or timeout is reached\nRun the command ignoring its output.\nRun the command logging the output and error\nLogs to $FM_LOGS_DIR/{name}.{out,err}\nSets the fedimint-cli and mint client alias\nSets the fedimint-cli binary to match the fedimintd’s …\nMaps a version hash to a release version\nReturns the fedimintd version from clap or default min …\nReturns the gatewayd version from clap or default min …\nReturns the fedimint-cli version from clap or default min …\nReturns the gateway-cli version from clap or default min …\nThe config gen params that need to be in consensus, sent …\nThe config gen params response which includes our peer id\nThe same for all peers\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGuardian-defined key-value pairs that will be passed to …\nModule init params (also contains local params from us)\nOur id (might change if new peers join)\nEndpoints of all servers\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")