searchState.loadedDescShard("fedimint_ln_client", 0, "A public key of another user, the lightning payment will …\nThe high-level state of an pay operation internal to the …\nClient side lightning module\nThe high-level state of a pay operation over lightning, …\nThe high-level state of a reissue operation started with …\nNumber of blocks until outgoing lightning contracts times …\nThe keypair used to receive payments for ourselves, we …\nWhere to receive the payment to, either to ourselves or to …\nSubscribes to either a internal or external lightning …\nReturns a bool indicating if it was an external receive\nClaim the funded, unspent incoming contract by submitting …\nReceive over LN with a new invoice\nReceive over LN with a new invoice for another user\nReceive over LN with a new invoice for another user, …\nReceive over LN with a new invoice\nCreate an output that funds an incoming contract within …\nCreate an output that incentivizes a Lightning gateway to …\nThis is a hack to allow us to use the deprecated variant …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a gateway to be used for a lightning operation. If …\nGet LN invoice with given settings\nHashes the client’s preimage authentication secret with …\nIncoming State Machine\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns all gateways that are currently in the gateway …\nPays a LN invoice with our available funds using the …\nThe public key of the receiving key\nImplements recurring payment codes (e.g. LNURL, BOLT12)\nScan unspent incoming contracts for a payment hash that …\nScan unspent incoming contracts for a payment hash that …\nSelects a Lightning Gateway from a given <code>gateway_id</code> from …\nSubscribes to a stream of updates about a particular …\n<code>ToString::to_string</code>, but without panic on OOM.\nTweak a user key with an index, this is used to generate a …\nTweak a secret key with an index, this is used to claim an …\nUpdates the gateway cache by fetching the latest …\nContinuously update the gateway cache whenever a gateway …\nFilter out duplicate gateways. This is necessary because …\nRetrieves the map of gateway remove challenges from the …\nRemoves the gateway’s registration record. First checks …\nAwait a LNURL-triggered lightning receive operation to …\nCreate a lightning invoice to receive payment via gateway\nList details for a specific invoice by operation id\nList all invoices and their operation ids generated for a …\nList all LNURLs registered\nRegister and manage LNURLs\nPay a lightning invoice or lnurl via a gateway\nRegister a new LNURL payment code with a specific LNURL …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nShrthand for setting the short description in the LNURL …\nSet LNURL meta data, see LUD-06 for more details on the …\nThe operation ID of the receive operation to await\nThe LNURL server to register with\nAmount to pay, used for lnurl\nInvoice comment/description, used on lnurl\nLightning invoice or lnurl\nPrefixes between 0xd0..=0xff shall all be considered …\nAn iterator over the variants of DbKeyPrefix\nPrefixes between 0xb0..=0xcf shall all be considered …\nA single recurring payment code (e.g. LNURL) that was …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nMigrates <code>SubmittedOfferV0</code> to <code>SubmittedOffer</code> and …\nMigrates <code>SubmittedOffer</code> with enum prefix 5 back to …\nMigrates <code>Refund</code> state with enum prefix 5 to contain the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert an iterator of anything into <code>FallibleIterator</code> by …\nConvert an iterator of <code>Result</code>s into <code>FallibleIterator</code> by …\n<code>ToString::to_string</code>, but without panic on OOM.\nState machine that executes a transaction between two users\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\nState machine that requests the lightning gateway to pay …\nData needed to pay an invoice, may be the whole invoice or …\nWaits for a contract with <code>contract_id</code> to be cancelled by …\nWaits until a specific block height at which the contract …\nReturns the expiry timestamp in seconds since the UNIX …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>lightningpay</code> module is needed to suppress the deprecation …\nMetadata on how to obtain the preimage\nClaims a refund for an expired or cancelled outgoing …\n<code>ToString::to_string</code>, but without panic on OOM.\nState machine that requests the lightning gateway to pay …\nState machine that waits on the receipt of a Lightning …\nOld version of <code>LightningReceiveSubmittedOffer</code>, used for …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>ToString::to_string</code>, but without panic on OOM.\nEvent that is fired when a recurring payment code (i.e. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\nFederation ID in which the invoices should be generated\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLNURL meta data, see LUD-06 for more details on the format\nPublic key from which other keys will be derived for each …\nRecurring payment protocol to use\nEither a BOLT12 offer or LNURL\n<code>ToString::to_string</code>, but without panic on OOM.")