searchState.loadedDescShard("fedimint_server", 0, "Server side fedimint module traits\nA function/closure type for handling dashboard UI\nA function/closure type for handling setup UI\nFedimint toplevel config\nThe actual implementation of consensus\nNetworking for mint-to-mint and client-to-mint …\nTotal client config\nAll the parameters necessary for generating the …\nAll the info we configure prior to config gen starting\nShared consensus-critical config\nConsensus broadcast settings that result in 3 minutes …\nThe default maximum open connections the API can handle\nConsensus broadcast settings that result in 10 seconds …\nThe federation id is a copy of the authentication …\nFederation-wide client config\n<code>serde_json::Value</code> that must contain <code>kind: String</code> field\nConnection information sent between peers in order to …\nPrivate for this federation member data that are security …\nAll the serializable configuration for the fedimint server\nConfig for the server-side of a particular Federation …\nModule (server side) config, typed\nSecret API auth string\nSecret API auth string\nBind address for our API\nNetwork addresses and names for all peer APIs\nAPI endpoints for each federation member\nPublic key for our iroh api endpoint\nURL for our API connection\nGet decoders for <code>modules</code> and skip unsupported ones\nPublic keys for the atomic broadcast to authenticate …\nSigning session keys for each federation member Optional …\nInfluences the atomic broadcast ordering latency, should …\nNumber of rounds per session.\nSecret key for the atomic broadcast to sign messages\n0.4.0 and later uses a hash of broadcast public keys to …\nThe version of the binary code running\nContains all configuration that needs to be the same for …\nReturns the consensus hash for a given client config\nCore consensus version\nGet decoders for <code>modules</code> and fail if any is unsupported\nRuns the distributed key gen algorithm\nRandom dummy id for testing\nEnable iroh for networking\nThe peer’s api and p2p endpoint\nFederation name from config metadata (if set)\nFederation name set by the leader\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new config from the results of a trusted or …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAssemble from the three functionally distinct parts\n(soft-deprecated): Get the first instance of a module of a …\nConstructs a module config by id\nConstructs a module config by name\nOur peer id (generally should not change)\nOur own peer id\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOptional secret key for our iroh api endpoint\nOptional secret key for our iroh api endpoint\nPublic keys for all iroh api and p2p endpoints\nOptional secret key for our iroh p2p endpoint\nOptional secret key for our iroh p2p endpoint\nContains all configuration that is locally configurable …\nHow many API connections we will accept\nGet the value of a given meta field\nAdditional config the federation wants to transmit to the …\nAdditional config the federation wants to transmit to the …\nGuardian-defined key-value pairs that will be passed to …\nSecret material from modules\nAll configuration that needs to be the same for modules\nSet the params (if leader) or just the local params (if …\nThe peer’s name\nThe peer’s name\nName of the peer, used in TLS auth\nBind address for our P2P connection (both iroh and tcp/tls)\nNetwork addresses and names for all p2p connections\nPublic key for our iroh p2p endpoint\nURL for our P2P connection\nEndpoints of all servers\nContains all configuration that will be encrypted such as …\nSee <code>DynRawFallback::redecode_raw</code>.\nRegistry for config gen\nApi versions supported by this server\nCerts for TLS communication, required for peer …\nOptional secret key for our websocket p2p endpoint\nOur TLS certificate private key\nTurn the typed config into type-erased version\nConverts a federation id to a public key to which we know …\nConverts a consensus-encoded client config struct to a …\nSplit the config into its two functionally distinct parts\nBind address for our UI connection (always http)\nThe peer’s public URL (e.g. <code>wss://fedimint-server-1:5000</code>)\nAgreed on core consensus version\nWorkaround for a serde <code>flatten</code> quirk\nPublic key for our iroh api endpoint\nUrl for our websocket api endpoint\nTLS certificate for our websocket p2p endpoint\nPublic key for our iroh p2p endpoint\nUrl for our websocket p2p endpoint\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRuns the DKG algorithms with our peers. We do not handle …\nRuns a single step of the DKG algorithm\nClient configuration file\nClient connection string file\nServer consensus-only configurable file\nDatabase file name\nServer locally configurable file\nPlain-text stored password, used to restart the server …\nServer encrypted private keys file\nSalt backup for combining with the private key\nReads an encrypted json file into a struct\nWrites struct into an encrypted json file\nReads a plaintext json file into a struct\nWrites struct into a plaintext json file\nReads the server from the local, private, and consensus …\nWrites the server into configuration files (private keys …\nA handle passed to <code>ServerModuleInit::distributed_gen</code>\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConnection information sent between peers in order to …\nServes the config gen API endpoints\nState held by the API after receiving a …\nOur auth string\nDB not really used\nOur api and p2p endpoint\nFederation name set by the leader\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOptional secret key for our iroh api endpoint\nOptional secret key for our iroh p2p endpoint\nOur local connection\nName of the peer, used in TLS auth\nTriggers the distributed key generation\nOur config gen settings configured locally\nConnection info received from other guardians\nIn-memory state machine\nOur TLS private key\nHow many txs can be stored in memory before blocking the …\nImplements the client API through which users interact …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nList API URL announcements from all peers we have received …\nOur server configuration\nCached client config\nDatabase for serving the API\nReturns the tagged fedimintd version currently running\nReturns the argument unchanged.\nUses the in-memory config to write a config backup tar …\nCalls <code>U::from(self)</code>.\nModules registered with the federation\nFor sending API events to consensus such as transactions\nAdd an API URL announcement from a peer to our database to …\nA concrete implementation of <code>IServerDbMigrationContext</code> APIs\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA newtype for a nice <code>fmt::Debug</code> of a <code>ConsensusItem</code>\nA compact citem formatter, useful for debugging in case of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRuns the main server consensus loop\nCreates a backup of the database in the checkpoint …\nReturns the full path where the database checkpoints are …\nDeletes the database checkpoint directory equal to …\nReturns the argument unchanged.\nReturns the number of sessions already saved in the …\nCreates the directory within the data directory for …\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAn iterator over the variants of DbKeyPrefix\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe initial version that set up the consensus\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert an iterator of anything into <code>FallibleIterator</code> by …\nThe last version that passed db migration checks\nConvert an iterator of <code>Result</code>s into <code>FallibleIterator</code> by …\nLock for spawning exactly one task for updating backup …\nInitialize gauges or other metrics that need eager …\njsonrpsee/tower rpc layer that collects rpc stats\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nImplements a connection manager for communication with …\nProvides an abstract network connector interface and …\nHow long to wait before timing out client connections\nHas the context necessary for serving API endpoints\nReturns the argument unchanged.\nGet “active” secret - one that should be used to call …\nGet all secrets\nCalls <code>U::from(self)</code>.\nGet empty value - meaning no secrets to use\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a list of all peers and their respective API URLs …\nChecks if we already have a signed API endpoint …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAllows to connect to peers and to listen for incoming …\nTCP connector with encryption and authentication\nList of overrides to use when attempting to connect to …\nSanitizes name as valid domain name\nThe Iroh endpoint\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMap of all peers’ connection information we want to be …\nParses the host and port from a url")