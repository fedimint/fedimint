searchState.loadedDescShard("fedimint_gw_client", 0, "Client side Lightning module <strong>for the gateway</strong>.\nThe high-level state of a reissue operation started with …\nThe high-level state of an intercepted HTLC operation …\nAn interface between module implementation and the general …\nFor the given <code>OperationId</code>, this function will wait until …\nUse the gateway’s lightning node to send a complete HTLC …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAttempt buying preimage from this federation in order to …\nAttempt fulfill HTLC by buying preimage from the federation\nPay lightning invoice on behalf of federation user\nSubscribe to updates when the gateway is handling an …\nRetrieve a client given a federation ID, used for swapping …\nRetrieves the federation’s routing fees from the …\nThe index of the incoming htlc in the incoming channel\nThe incoming HTLC amount in millisatoshi.\nThe id of the incoming channel\nThe incoming HTLC expiry\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe outgoing HTLC amount in millisatoshi\nPay a Lightning invoice using the gateway’s lightning …\nThe HTLC payment hash.\nAttempts to remove a gateway’s registration from the …\nRetrieves the signing challenge from each federation peer. …\nThe short channel id of the HTLC.\nRegister gateway with federation\n<code>ToString::to_string</code>, but without panic on OOM.\nVerifies that the supplied <code>preimage_auth</code> is the same as the\nVerify that the lightning node supports private payments …\nState machine that completes the incoming payment by …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\nLNv1 event that is emitted when a preimage was …\nLNv1 event that is emitted when an incoming payment …\nLNv1 event that is emitted when an incoming payment …\nLNv1 event that is emitted when an incoming payment …\nLNv1 event that is emitted when an outgoing payment …\nLNv1 event that is emitted when an outgoing payment …\nLNv1 event that is emitted when an outgoing payment …\nComputes the <code>StructurePaymentEvents</code> for all LNv1 payments.\nThe amount offered in the contract.\nThe contract ID that uniquely identifies the outgoing …\nThe contract ID that uniquely identifies the outgoing …\nThe contract ID that uniquely identifies the outgoing …\nThe contract ID that uniquely identifies the incoming …\nThe reason the outgoing payment failed.\nThe reason the incoming payment attempt failed.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe amount of the invoice that is being paid.\nThe amount specified in the invoice.\nThe operation ID of the outgoing payment\nThe operation ID of the outgoing payment\nLNv1 outgoing contract\nLNv1 outgoing contract\nThe payment hash of the invoice that is being paid.\nThe payment hash of the invoice that was paid.\nThe payment hash of the invoice that failed to be paid.\nThe payment hash of the payment.\nThe preimage acquired from successfully paying the invoice.\nThe decrypted preimage that was acquired from the …\nState machine that executes the Lightning payment on …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.")