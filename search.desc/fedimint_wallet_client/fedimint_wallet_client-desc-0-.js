searchState.loadedDescShard("fedimint_wallet_client", 0, "A raw scriptpubkey (including pay-to-pubkey) under Legacy …\nTo further mitigate the risk of a peg-out transaction …\nPay-to-PubKey-Hash\nAllows a user to bump the fees of a <code>PendingTransaction</code>\nModule consensus version that introduced support for …\nPay-to-ScriptHash(includes nested wsh/wpkh/sorted multi)\nPay-to-Taproot\nA transaction output, either unspent or consumed\nThe non-resource, just plain-data parts of …\nContains the Bitcoin transaction id of the transaction …\nSummary of the coins within the wallet.\nPay-to-Witness-PubKey-Hash\nPay-to-Witness-ScriptHash with Segwitv0 context\nAllocates a deposit address that is controlled by the …\nAwait for num deposit by <code>OperationId</code>\nThe bitcoin transaction is saved as soon as we see it so …\nLegacy, state-machine based peg-ins, replaced by …\nFees expressed as an increase over existing peg-out fees\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the child index to derive the next peg-in tweak …\nReturns a summary of the wallet’s coins\nFetches the fees that would need to be paid to make the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIndex of the deposit output\nCalled every time a peg-in was claimed\nPeg-in monitor: a task monitoring deposit addresses for …\nUpdated to wake up pegin monitor\nAll change UTXOs from peg-out transactions that are either …\nAll transaction outputs from peg-out transactions that are …\nPolls the federation checking if the activated module …\nAttempt to increase the fee of a onchain withdraw …\nSchedule given address for immediate re-check for deposits\nSchedule given address for immediate re-check for deposits\nLike <code>Self::recheck_pegin_address</code> but by <code>operation_id</code>\nWallet recovery\nAllocates a deposit address controlled by the federation, …\nAll UTXOs available as inputs for transactions\nReturns a stream of updates about an ongoing deposit …\nReturns true if the federation’s wallet module consensus …\nTotal amount of immediately spendable UTXOs and pending …\nTotal amount of all change UTXOs from peg-out transactions …\nTotal amount of all transaction outputs from peg-out …\nTotal amount of all spendable UTXOs\nTotal amount of all change UTXOs from peg-out transactions …\nTotal amount of all transaction outputs from peg-out …\nTotal amount of all change UTXOs from peg-out transactions …\nTotal amount of all transaction outputs from peg-out …\nBitcoin tx id to bump the fees for\nChange UTXOs created from peg-out transactions that have …\nTransaction outputs consumed in peg-out transactions that …\nChange UTXOs created from peg-out transactions that have …\nTransaction outputs consumed in peg-out transactions that …\nAttempt to withdraw a given <code>amount</code> of Bitcoin to a …\nAdded in 0.4.2, can be <code>None</code> for old deposits or <code>Some</code> for …\nWhen scanning the history of the Federation, there’s no …\nWe will check this many addresses after last actually used …\nNew client will start deriving new addresses from last …\nWallet client module recovery implementation\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA part of <code>WalletClientInit::recover</code> extracted out to be …\nTracks addresses <code>TweakIdx</code>s/addresses that are expected to …\nCollection of recent scripts from federation history that …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nNext tweak idx to add to <code>pending_pubkey_scripts</code>\nAll the pubkey scripts we are looking for in the …\nPop a someone-elses used deposit address to use a decoy\nWrite a someone-elses used deposit address to use a decoy\nAny time we detect one of the scripts in …\nAwait a deposit on a given deposit address\nReturns the Bitcoin RPC kind and URL, if authenticated\nReturns the Bitcoin RPC kind\nTrigger wallet address check (in the background)\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAwait more than just one deposit\nPrefixes between 0xd0..=0xff shall all be considered …\nPrefixes between 0xd0..=0xff shall all be considered …\nAn iterator over the variants of DbKeyPrefix\nPrefixes between 0xb0..=0xcf shall all be considered …\nA counter tracking next index to use to derive a peg-in …\nPeg in index that was already allocated and is being …\nAn index of a deposit address\nAll previous on chain outputs claimed for this peg-in …\nTime the address was allocated (created)\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert an iterator of anything into <code>FallibleIterator</code> by …\nLast time the client checked the address for pegins\nNext time client is going to checked the address for pegins\n<code>OperationId</code> corresponding to this peg-in address.\nConvert an iterator of <code>Result</code>s into <code>FallibleIterator</code> by …\nConfigures which bitcoin RPC to use\nSee <code>WalletConfigConsensus::client_default_bitcoin_rpc</code>.\nPoints to a Bitcoin API that the client can use to …\nPoints to a Bitcoin API that the client can use to …\nIf we cannot determine the feerate from our bitcoin node, …\nFees to be charged for deposits and withdraws <em>by the </em>…\nFees for bitcoin transactions\nHow many bitcoin blocks to wait before considering a …\nConfirmations required for a peg in to be accepted by …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBitcoin network (e.g. testnet, bitcoin)\nThe bitcoin network the client will use\nThe public keys for the bitcoin multisig\nThe federations public peg-in-descriptor\nThe federations public peg-in-descriptor\nSecret key for signing bitcoin multisig transactions\nThe state machine driving forward a deposit (aka peg-in).\nThe bitcoin transaction is saved as soon as we see it so …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIndex of the deposit output\nFedimint transaction id in which the deposit is being …\nKey pair of which the public was used to tweak the …\nEvent that is emitted when the client confirms an onchain …\nEvent that is emitted when the client pegs-out ecash …\nThe amount being deposited\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe out index of the deposit transaction\nThe bitcoin transaction ID\nThe bitcoin transaction ID\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA peg-in transaction was already claimed (state machine …\nOutcome of checking a single deposit Bitcoin transaction …\nA state machine was created to claim the peg-in\nA helper struct meant to combined data from all …\nThere’s a tx pending (needs more confirmation)\nQuery via btc rpc for a history of an address derived with …\nIndex keys due for a check\nCombine current state with another record\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalculate next actions from the database\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNearest key that is not due yet\nCurrent time\nDesired retry delay for a single outcome\nDesired retry delay for a bunch of outcomes.\nA deposit monitoring task\nAn object that can be used as a Ricardian contract to …\nA key or object containing keys that may be tweaked for …\nSerialize the contract in a deterministic way to be used …\nTweak the key with a <code>tweak</code> contract\nA proof about a script owning a certain output. Verifiable …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\ngraph LR Created –&gt; Success Created –&gt; Aborted\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")